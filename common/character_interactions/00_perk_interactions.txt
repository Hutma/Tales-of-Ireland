###################
# Claim Throne
# by Petter Vilberg
###################
claim_throne_interaction = {
	category = interaction_category_hostile

	ai_targets = {
		ai_recipients = liege
	}
	
	auto_accept = yes
	use_diplomatic_range = no
	ignores_pending_interaction_block = yes

	scheme = claim_throne

	desc = claim_throne_interaction_desc
	
	is_shown = {
		exists = scope:actor.liege
		scope:recipient = scope:actor.liege
		scope:actor = { has_perk = meritocracy_perk }
		NOT = { scope:recipient = scope:actor }
		
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_physically_able_adult = yes
			can_start_scheme = {
				target = scope:recipient
				type = claim_throne
			}
		}
	}

	is_valid = {
		scope:actor = {
			has_perk = meritocracy_perk
		}
	}

	on_accept = {
		scope:actor = {
			stress_impact = {
				content = medium_stress_impact_gain
				just = medium_stress_impact_gain
			}
			hidden_effect = {
				send_interface_toast = {
					title = claim_throne_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					start_scheme = {
						target = scope:recipient
						type = claim_throne
					}
					show_as_tooltip = {
						stress_impact = {
							content = medium_stress_impact_gain
							just = medium_stress_impact_gain
						}
					}
				}
			}
		}
	}
	
	ai_potential = {
		is_adult = yes
		ai_greed >= medium_positive_ai_value
		learning >= medium_skill_rating
		intrigue >= mediocre_skill_rating
		NOR = {
			has_trait = content
			opinion = {
				target = liege
				value >= high_positive_opinion
			}
			any_scheme = {
				OR = {
					scheme_type = murder
					scheme_type = abduct
					scheme_type = claim_throne
					scheme_type = fabricate_hook
				}
			}
		}
	}

	ai_frequency = 36

	ai_will_do = {
		base = 100

		start_hostile_scheme_ai_base_modifiers = yes # At the end so Cowed can block it completely
	}
}


###################
# Fabricate Hook
# by Petter Vilberg
###################
fabricate_hook_interaction = {
	category = interaction_category_hostile

	auto_accept = yes
	ignores_pending_interaction_block = yes

	scheme = fabricate_hook

	desc = fabricate_hook_interaction_desc
	
	is_shown = {
		scope:actor = { has_perk = truth_is_relative_perk }
		NOT = { scope:recipient = scope:actor }
		
	}

	is_valid = {
		scope:actor = { has_perk = truth_is_relative_perk } # To display that it's available because of the Perk
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_physically_able_adult = yes
			can_start_scheme = {
				target = scope:recipient
				type = fabricate_hook
			}
		}
	}

	on_accept = {
		scope:actor = {
			stress_impact = {
				just = medium_stress_impact_gain
				honest = medium_stress_impact_gain
				compassionate = minor_stress_impact_gain
			}
			hidden_effect = {
				send_interface_toast = {
					title = fabricate_hook_interaction_toast
					left_icon = scope:actor
					right_icon = scope:recipient

					start_scheme = {
						target = scope:recipient
						type = fabricate_hook
					}
					show_as_tooltip = {
						stress_impact = {
							just = medium_stress_impact_gain
							honest = medium_stress_impact_gain
							compassionate = minor_stress_impact_gain
						}
					}
				}
			}
		}
	}

	ai_targets = {
		ai_recipients = liege
		ai_recipients = vassals
	}

	ai_targets = {
		ai_recipients = neighboring_rulers
		ai_recipients = peer_vassals
		max = 10
	}
	
	ai_targets = {
		ai_recipients = courtiers
		max = 5
	}
	
	ai_targets = {
		ai_recipients = realm_characters
		max = 30
	}
	
	ai_potential = {
		is_adult = yes
		ai_greed >= low_positive_ai_value
		intrigue >= medium_skill_rating
		NOR = {
			has_trait = content
			any_scheme = {
				OR = {
					scheme_type = murder
					scheme_type = abduct
					scheme_type = claim_throne
					scheme_type = fabricate_hook
				}
			}
		}
	}
	
	ai_target_quick_trigger = {
		adult = yes
	}

	ai_frequency = 36

	ai_will_do = {
		base = 50

		
		modifier = {
			add = -50
			
			opinion = {
				target = scope:recipient
				value >= high_positive_opinion
			}
		}
		
		modifier = {
			add = -40
			
			scope:recipient = {
				is_landed = yes
			}
		}
		
		modifier = {
			add = 50
			
			scope:recipient = {
				is_landed = no
				OR = {
					liege = scope:actor.liege
					liege = {
						OR = {
							has_relation_rival = scope:actor
							has_relation_nemesis = scope:actor
						}
					}
				}
			}
		}
		
		modifier = {
			factor = 0
			
			scope:recipient = {
				has_council_position = councillor_spymaster
			}
		}
		start_hostile_scheme_ai_base_modifiers = yes # At the end so Cowed can block it completely
	}
}


###################
# Demand Payment
# by Petter Vilberg
###################
demand_payment_interaction = {
	category = interaction_category_diplomacy

	auto_accept = yes
	use_diplomatic_range = yes

	desc = demand_payment_interaction_desc

	is_shown = {
		scope:actor = {
			has_perk = golden_obligations_perk
		}
		scope:recipient = {
			is_ai = yes
		}
		NOT = { scope:recipient = scope:actor }
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_physically_able_adult = yes
			NOT = {
				is_at_war_with = scope:recipient
			}
		}
		scope:recipient = {
			is_imprisoned = no
		}
		scope:recipient = {
			custom_description = {
				text = demand_payment_too_little_gold
				gold >= 1
			}
		}
	}

	is_valid = {
		scope:actor = {
			has_usable_hook = scope:recipient
		}
	}

	is_highlighted = {
		scope:actor = {
			has_usable_hook = scope:recipient
		}
	}

	on_accept = {
		if = {
			limit = {
				scope:recipient.gold < scope:recipient.golden_obligation_value
			}
			custom_tooltip = demand_payment_too_little_gold_tt
		}
		scope:actor = {
			send_interface_toast = {
				title = demand_payment_interaction_message
				left_icon = scope:recipient

				scope:actor = {
					use_hook = scope:recipient
				}
				scope:recipient = {
					if = {
						pay_short_term_gold = {
							target = scope:actor
							gold = golden_obligation_value
						}
						limit = {
							gold > golden_obligation_value
						}
					}
					else = {
						pay_short_term_gold = {
							target = scope:actor
							gold = {
								value = scope:recipient.gold
								floor = yes
							}
						}
					}
				}
			}
			stress_impact = {
				generous = medium_stress_impact_gain
			}
		}
	}
	
	ai_potential = {
		NOT = {
			has_trait = generous
		}
		OR = {
			ai_greed >= low_positive_ai_value
			is_at_war = yes
		}
	}
	
	ai_target_quick_trigger = {
		adult = yes
	}
	
	ai_targets = {
		ai_recipients = hooked_characters
	}
	
	ai_frequency = 36
	
	ai_will_do = {
		base = 100

		modifier = { #ai won't use the interaction if they'll get nothing out of it
			factor = 0
			scope:recipient.gold < 8
		}
		
		modifier = {
			factor = 0
			scope:actor = {
				OR = {
					has_relation_friend = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_best_friend = scope:recipient
					has_relation_soulmate = scope:recipient
				}
			}
		}
	}
}



##################
# Buy Claim
# by Petter Vilberg
##################
buy_claim_interaction = {
	category = interaction_category_diplomacy

	desc = buy_claim_interaction_desc
	target_type = title
	target_filter = recipient_domain_titles
	ignores_pending_interaction_block = yes

	is_shown = {
		scope:actor = {
			has_perk = sanctioned_loopholes_perk
			NOT = { target_is_liege_or_above = scope:recipient }
		}
		NOT = {
			scope:actor = scope:recipient
			AND = {
				scope:recipient = scope:actor.faith.religious_head
				scope:actor.faith = {
					NOT = { has_doctrine = doctrine_theocracy_temporal }
				}
			}
		}
		scope:recipient = {
			is_landed = yes
			primary_title.tier > tier_barony
			NOT = {	
				target_is_liege_or_above = scope:actor
			}
		}
	}

	can_be_picked_title = {
		scope:target = { tier >= tier_county }
	}
	
	is_valid_showing_failures_only = {
		trigger_if = { # Can't request on titles you already have a claim on
			limit = {
				exists = scope:target
				scope:actor = {
					has_claim_on = scope:target
				}
			}
			custom_description = {
				text = buy_claim_has_pressed_claim_already
				always = no
			}
		}
		trigger_if = { # Can't request claims on baronies
			limit = {
				exists = scope:target
				scope:target = {
					tier = tier_barony
				}
			}
			custom_description = {
				text = "hof_ask_for_claim_no_baronies"
				always = no
			}
		}
		trigger_if = { # Can't buy Kingdom Claims if you're a King or Emperor
			limit = {
				exists = scope:target
				scope:target = {
					tier = tier_kingdom
				}
				scope:actor.highest_held_title_tier >= tier_kingdom
			}
			custom_description = {
				text = buy_claim_no_king_or_emperor_kingdom
				always = no
			}
		}
		trigger_if = { # Can't buy Emperor Claims if you're already an Emperor
			limit = {
				exists = scope:target
				scope:target = {
					tier = tier_empire
				}
				scope:actor.highest_held_title_tier >= tier_empire
			}
			custom_description = {
				text = buy_claim_no_emperor_empire
				always = no
			}
		}
		trigger_if = { # Can't buy claims on head of faith titles
			limit = {
				exists = scope:target.controlled_faith
			}
			custom_description = {
				text = buy_claim_no_religious_titles
				always = no
			}
		}
		scope:actor = { # Variable piety cost depending on tier
			trigger_if = {
				limit = {
					exists = scope:target
					scope:target = {
						tier = tier_county
					}
				}
				piety >= minor_buy_claim_piety_value
			}
			trigger_if = {
				limit = {
					exists = scope:target
					scope:target = {
						tier = tier_duchy
					}
				}
				piety >= medium_buy_claim_piety_value
			}
			trigger_if = {
				limit = {
					exists = scope:target
					scope:target = {
						tier = tier_kingdom
					}
				}
				piety >= major_buy_claim_piety_value
			}
			trigger_if = {
				limit = {
					exists = scope:target
					scope:target = {
						tier = tier_empire
					}
				}
				piety >= massive_buy_claim_piety_value
			}
		}
		scope:recipient = { is_diplomatically_available = yes }
		scope:recipient = { NOT = { has_strong_hook = scope:actor } }
	}
	
	auto_accept = yes
	
	on_accept = {
		scope:actor = {
			send_interface_toast = {
				title = buy_claim_interaction.message
				left_icon = scope:actor
				right_icon = scope:recipient
				if = {
					limit = {
						scope:target = {
							tier = tier_county
						}
					}
					add_piety = minor_buy_claim_piety_loss
				}
				if = {
					limit = {
						scope:target = {
							tier = tier_duchy
						}
					}
					add_piety = medium_buy_claim_piety_loss
				}
				if = {
					limit = {
						scope:target = {
							tier = tier_kingdom
						}
					}
					add_piety = major_buy_claim_piety_loss
				}
				if = {
					limit = {
						scope:target = {
							tier = tier_empire
						}
					}
					add_piety = massive_buy_claim_piety_loss
				}
				add_unpressed_claim = scope:target
			}
			stress_impact = {
				just = medium_stress_impact_gain
			}
		}
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = claimed_my_title_opinion
				opinion = -40
			}
			trigger_event = perk_interaction.0002
		}
	}
}