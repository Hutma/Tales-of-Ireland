sacrifice_to_sidhe_decision = {
	picture = "gfx/interface/illustrations/decisions/religion_decision.dds"
	
	desc = sacrifice_to_sidhe_decision_desc

	ai_check_interval = 80
	cooldown = {
		years = 10
	}
	
	is_shown = {
		is_ruler = yes
		is_landed = yes
		faith = {
			has_doctrine_parameter = sacrifice_to_sidhe_decision_active
		}		
	}

	is_valid = {
		piety_level >= 2
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		is_at_war = no
	}

	cost = {
		piety = 150
	}

	effect = {
		trigger_event = {
			id = toi_decisions.010
			days = 7 
		}
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

hail_high_king_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_high_king.dds"
	
	desc = hail_high_king_decision_desc

	ai_check_interval = 200
	cooldown = {
		years = 10
	}
	
	is_shown = {
		is_ruler = yes
		has_trait = milesian	
		NOT = {
			root = title:k_high_kingship.holder
		}
	}

	is_valid = {
		exists = title:k_high_kingship.holder
		prestige_level >= 2
		title:k_high_kingship.holder = {
			has_trait = milesian
		}
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		is_at_war = no
	}

	cost = {
		prestige = 150
	}

	effect = {
		add_character_modifier = {
			modifier = high_king_hailed
			years = 5
		}
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

high_king_protection_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_high_king.dds"
	
	desc = high_king_protection_decision_desc

	ai_check_interval = 20
	cooldown = {
		years = 25
	}
	
	is_shown = {
		is_ruler = yes
		has_trait = milesian	
		NOT = {
			root = title:k_high_kingship.holder
		}
	}

	is_valid = {
		AND = {
			is_at_war = yes
			title:k_high_kingship.holder = {
				has_trait = milesian
			}
		}
	}

	is_valid_showing_failures_only = {
		is_adult = yes
	}

	cost = {
		prestige = 100
		gold = 50
	}

	effect = {
		high_king_protection_decision_effect = yes		
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

establish_sean_bar_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_misc.dds"
	
	desc = establish_sean_bar_decision_desc
	
	ai_check_interval = 80

	is_shown = {
		AND  = {
			has_trait = drunkard
			NOT = {	#You can only do it once.
				is_target_in_global_variable_list = {
					name = unavailable_unique_decisions
					target = flag:establish_sean_bar_decision
				}
			}
		}
	}

	is_valid = {
		AND = {
			has_title = title:c_athlone
			prestige_level >= 2
			has_trait = drunkard
		}
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		is_at_war = no		
	}

	cost = {
		gold = 75
	}

	effect = {
		add_tales_of_abundance_lifestyle_perk_points = 1
		title:c_athlone = {
			add_county_modifier = {
				modifier = oldest_pub
			}
		}
		dynasty = {
			add_dynasty_modifier = {
				modifier = oldest_pub_founder
			}
		}
		add_to_global_variable_list = {
			name = unavailable_unique_decisions
			target = flag:establish_sean_bar_decision
		}
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

call_gladiators_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_toi_rule.dds"
	
	desc = call_gladiators_decision_desc
	
	ai_check_interval = 80

	is_shown = {
		highest_held_title_tier >= tier_duchy
		any_sub_realm_barony = {
			title_province = {
				has_building_or_higher = coliseum_01
			}
		}
	}

	is_valid = {
		prestige_level >= 2
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
	}

	cost = {
		gold = 75
	}

	effect = {
		gladiator_hired_decision_scripted_effect = yes
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 100
	}
}

buy_mercenaries_with_cattle_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_cattle.dds"
	
	desc = buy_mercenaries_with_cattle_decision_desc
	
	ai_check_interval = 80
	
	cooldown = { years = 20 }

	is_shown = {
		is_independent_ruler = yes
		is_landed = yes
	}

	is_valid = {
		capital_county = {
			development_level > 20
		}
		is_at_war = yes
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
	}

	cost = {
		gold = 15
	}

	effect = {
		buy_mercenaries_with_cattle_decision_scripted_effect = yes
	}

	ai_potential = {
		always = yes
	}

	ai_will_do = {
		base = 50
	}
}

#Not usable anymore
# cattle_for_a_feast_decision = { 
	# picture = "gfx/interface/illustrations/decisions/decision_cattle.dds"
	
	# desc = cattle_for_a_feast_decision_desc
	
	# ai_check_interval = 100
	
	# cooldown = { years = 15 }

	# is_shown = {
		# is_independent_ruler = yes
		# is_landed = yes
		# capital_county = {
			# development_level > 20
		# }
	# }

	# is_valid = {
		# any_held_title = {
			# tier = tier_county
			# development_level > 25
		# }
	# }

	# is_valid_showing_failures_only = {
		# is_available_adult = yes
	# }

	# cost = {
		# piety = 100
	# }

	# effect = {
		# trigger_event = {
			# id = toi_decisions.019
		# }
		# capital_province = {
			# spawn_activity = {
				# type = activity_feast
				# owner = root
			# }
		# }
		# custom_tooltip = host_feast_decision_desc_vassals
		# if = {
			# limit = {
				# is_independent_ruler = no
			# }
			# custom_tooltip = host_feast_decision_desc_liege_opinion
		# }
		# if = {
			# limit = {
				# employs_court_position = court_musician_court_position
				# any_court_position_holder = {
			        # type = court_musician_court_position
			        # is_physically_able = yes
			    # }
			# }
			# custom_tooltip = host_feast_decision_desc_court_musician_opinion
		# }

		# Piety gain
		# if = {
			# limit = {
				# faith = {
					# OR = {
						# has_doctrine_parameter = piety_from_feasts_active
						# AND = {
							# has_doctrine_parameter = summer_festivals_active
							# Only during 'summer' (May 1st through July 31st).
							# current_month >= 5
							# current_month <= 7
						# }
					# }
				# }
			# }
			# add_piety = {
				# value = 0

				# faith = {
					# if = {
						# limit = {
							# has_doctrine_parameter = summer_festivals_active
							# Only during 'summer' (May 1st through July 31st).
							# current_month >= 5
							# current_month <= 7
						# }
						# add = major_piety_value
					# }
					# if = {
						# limit = {
							# has_doctrine = tenet_ritual_celebrations
						# }
						# add = medium_piety_value
					# }
					# if = {
						# limit = {
							# has_doctrine = tenet_hedonistic
						# }
						# add = medium_piety_value
					# }
				# }
				# if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value >= 5 }
					# }
					# multiply = 2.5
				# }
				# else_if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value >= 4 }
					# }
					# multiply = 2
				# }
				# else_if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value >= 3 }
					# }
					# multiply = 1.5
				# }
				# else_if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value >= 2 }
					# }
					# multiply = 1
				# }
				# else_if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value <= 1 }
					# }
					# multiply = 0.5
				# }

				# min = medium_piety_value # Always give some piety, even if we don't have any of the specified tenets.
			# }
		# }

		# Prestige gain from Tradition or Struggle
		# if = {
			# limit = {
				# OR = {
					# culture = {
						# has_cultural_parameter = refined_feasts
					# }
					# any_character_struggle = {
						# involvement = involved
						# is_struggle_type = iberian_struggle
						# has_struggle_phase_parameter = struggle_prestige_from_feast
					# }
				# }
			# }
			# add_prestige = {
				# value = medium_prestige_value
				# if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value >= 5 }
					# }
					# multiply = 2.5
				# }
				# else_if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value >= 4 }
					# }
					# multiply = 2
				# }
				# else_if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value >= 3 }
					# }
					# multiply = 1.5
				# }
				# else_if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value >= 2 }
					# }
					# multiply = 1
				# }
				# else_if = {
					# limit = {
						# has_royal_court = yes
						# amenity_level = { type = court_food_quality value <= 1 }
					# }
					# multiply = 0.5
				# }
				# if = {
					# limit = {
						# any_character_struggle = {
							# involvement = involved
							# is_struggle_type = iberian_struggle
							# has_struggle_phase_parameter = struggle_prestige_from_feast
						# }
					# }
					# multiply = 1.25
				# }
			# }
		# }

		# Stress loss
		# if = {
			# limit = {
				# OR = {
					# has_trait = shy
				# }
			# }
			# custom_tooltip = host_feast_decision_desc_shy
		# }
		# else = {
			# if = {
				# limit = {
					# has_royal_court = yes
					# amenity_level = { type = court_food_quality value >= 5 }
				# }
				# stress_impact = {
					# base = exotic_feast_stress_loss_value
					# gluttonous = feast_stress_loss_value
					# gregarious = feast_stress_loss_value
					# reveler_1 = feast_stress_loss_value
					# reveler_2 = feast_stress_loss_value
					# reveler_3 = feast_stress_loss_value
					# drunkard = feast_stress_loss_value
					# comfort_eater = feast_stress_loss_value
					# generous = feast_stress_loss_value
					# greedy = activity_stress_gain_impact
				# }
			# }
			# else_if = {
				# limit = {
					# has_royal_court = yes
					# amenity_level = { type = court_food_quality value >= 4 }
				# }
				# stress_impact = {
					# base = lavish_feast_stress_loss_value
					# gluttonous = feast_stress_loss_value
					# gregarious = feast_stress_loss_value
					# reveler_1 = feast_stress_loss_value
					# reveler_2 = feast_stress_loss_value
					# reveler_3 = feast_stress_loss_value
					# drunkard = feast_stress_loss_value
					# comfort_eater = feast_stress_loss_value
					# generous = feast_stress_loss_value
					# greedy = activity_stress_gain_impact
				# }
			# }
			# else_if = {
				# limit = {
					# has_royal_court = yes
					# amenity_level = { type = court_food_quality value >= 3 }
				# }
				# stress_impact = {
					# base = medium_feast_stress_loss_value
					# gluttonous = feast_stress_loss_value
					# gregarious = feast_stress_loss_value
					# reveler_1 = feast_stress_loss_value
					# reveler_2 = feast_stress_loss_value
					# reveler_3 = feast_stress_loss_value
					# drunkard = feast_stress_loss_value
					# comfort_eater = feast_stress_loss_value
					# generous = feast_stress_loss_value
					# greedy = activity_stress_gain_impact
				# }
			# }
			# else_if = {
				# limit = {
					# has_royal_court = yes
					# amenity_level = { type = court_food_quality value <= 1 }
				# }
				# stress_impact = {
					# base = meager_feast_stress_loss_value
					# gluttonous = feast_stress_loss_value
					# gregarious = feast_stress_loss_value
					# reveler_1 = feast_stress_loss_value
					# reveler_2 = feast_stress_loss_value
					# reveler_3 = feast_stress_loss_value
					# drunkard = feast_stress_loss_value
					# comfort_eater = feast_stress_loss_value
					# generous = feast_stress_loss_value
					# greedy = activity_stress_gain_impact
				# }
			# }
			# else = {
				# stress_impact = {
					# base = feast_stress_loss_value
					# gluttonous = activity_stress_loss_impact
					# gregarious = activity_stress_loss_impact
					# reveler_1 = activity_stress_loss_impact
					# reveler_2 = activity_stress_loss_impact
					# reveler_3 = activity_stress_loss_impact
					# drunkard = activity_stress_loss_impact
					# comfort_eater = activity_stress_loss_impact
					# generous = activity_stress_loss_impact
					# greedy = activity_stress_gain_impact
				# }
			# }
		# }
		# if = {
			# limit = { exists = var:protected_alcohol_stores }
			# set_variable = {
				# name = protected_alcohol_stores
				# value = 0
			# }
		# }
	# }

	# ai_potential = {
		# always = yes
	# }

	# ai_will_do = {
		# base = 10
	# }
# }