##############
# WAR VALUES #
##############

# Truce Durations
## Since we want these to work out to nice, even numbers, we calc them manually rather than use multipliers.
standard_truce_duration_days = {
	value = 1825
	# Deductions.
	## Flexible truces perk.
	if = {
		limit = {
			scope:attacker = { has_perk = flexible_truces_perk }
		}
		add = -450
	}
	## Certain struggle phases.
	if = {
		limit = {
			scope:attacker = {
				any_character_struggle = {
					is_struggle_parameter_active_secondary_character_involvement_either_trigger = {
						PARAMETER = truces_by_involved_or_interlopers_within_region_shorter
						CHAR = scope:defender
					}
				}
			}
		}
		add = -900
	}
	if = {
		limit = {
			scope:attacker = {
				any_character_struggle = {
					is_struggle_parameter_active_secondary_character_involvement_either_trigger = {
						PARAMETER = truces_by_involved_or_interlopers_within_region_longer
						CHAR = scope:defender
					}
				}
			}
		}
		add = 900
	}
	# A truce should at least give a 2-year breather.
	min = 730
	if = {
		limit = {
			scope:attacker = {
				any_character_war = {
					primary_attacker = scope:attacker
					primary_defender = scope:defender
					using_cb = fp2_border_raid
				}
			}
		}
		multiply = 2
	}
}

#Victory Prestige Experience Gain
mongol_invasion_cb_prestige_experience_gain = 10

#Ally contribution prestige gain
mongol_invasion_cb_ally_prestige = 100

#Prestige gain
mongol_invasion_cb_prestige_gain = 250

#White peace prestige values
mongol_invasion_cb_prestige_white_peace = -100

# Determined Independence Cultural Tradition
determined_independence_defensive_advantage_value = 15

#############
# Raid
#############

# Practiced Pirates Cultural Tradition
not_tribal_raid_prestige_multiplier = 1.5

raid_gold_value = {	#How much cash does this settlement generate in a raid?
	value = monthly_income
	multiply = 10

	#Sensible max-mins.
	min = 30
	max = 100

	#Give a whole number.
	ceiling = yes
}

viking_conquest_ai_score_value = {
	value = 1
	scope:attacker = {
		if = {
			limit = { can_use_viking_invasion_cbs_trigger = yes }
			if = {
				limit = { NOT = { culture = scope:defender.culture } }
				add = 0.5
				if = {
					limit = {
						NOT = { culture = { has_same_culture_heritage = scope:defender.culture } }
					}
					add = 0.5
				}
			}
			if = {
				limit = { NOT = { faith = scope:defender.faith } }
				add = 0.5
				if = {
					limit = { NOT = { faith.religion = scope:defender.faith.religion } }
					add = 0.5
				}
			}
		}
		if = {
			limit = {
				scope:defender.faith = {
					has_doctrine_parameter = unreformed
				}
			}
			multiply = 0.2
		}
		if = {
			limit = {
				scope:defender.faith = scope:attacker.faith
			}
			multiply = 0.2
		}
	}
}

# Vassalization CB

vassalize_default_size = 3

vassalize_growth_per_innovation = 2

vassalization_size_limit = {
	value = vassalize_default_size
	scope:attacker = {
		if = {
			limit = {
				culture = {
					has_innovation = innovation_casus_belli
				}
			}
			add = vassalize_growth_per_innovation
		}
		if = {
			limit = {
				culture = {
					has_innovation = innovation_chronicle_writing
				}
			}
			add = vassalize_growth_per_innovation
		}
		if = {
			limit = {
				culture = {
					has_innovation = innovation_divine_right
				}
			}
			add = vassalize_growth_per_innovation
		}
		if = {
			limit = {
				culture = {
					has_innovation = innovation_rightful_ownership
				}
			}
			add = vassalize_growth_per_innovation
		}
	}
}

#############
# Vassalization CB
#############

vassalize_default_size = 3

vassalize_growth_per_innovation = 2

vassalization_size_limit = {
	value = vassalize_default_size
	scope:attacker = {
		if = {
			limit = {
				culture = {
					has_innovation = innovation_casus_belli
				}
			}
			add = vassalize_growth_per_innovation
		}
		if = {
			limit = {
				culture = {
					has_innovation = innovation_chronicle_writing
				}
			}
			add = vassalize_growth_per_innovation
		}
		if = {
			limit = {
				culture = {
					has_innovation = innovation_divine_right
				}
			}
			add = vassalize_growth_per_innovation
		}
		if = {
			limit = {
				culture = {
					has_innovation = innovation_rightful_ownership
				}
			}
			add = vassalize_growth_per_innovation
		}
	}
}

#############
# GHWs
#############
third_of_defenders_strength = {
	value = ghw_defenders_strength
	multiply = 0.33
}

#############
# Siege
#############

siege_base_capture_chance = {
	value = 35

	# Dynasty Perk: Practiced Kidnappers
	if = {
		limit = {
			scope:occupant = {
				exists = dynasty
				dynasty = { has_dynasty_perk = fp1_pillage_legacy_3 }
			}
		}
		add = 20
	}
	# Cultural Parameter: State Ransoms
	if = {
		limit = {
			OR = {
				# Either you're involved in large groups of the holding surrendering...
				scope:barony.culture = { has_cultural_parameter = knights_die_less_but_are_captured_more }
				# ... or you know your liege will pay your ransom.
				scope:barony.holder.culture = { has_cultural_parameter = knights_die_less_but_are_captured_more }
			}
			# Ransoms or no, the primary participants & their heirs know better than to surrender.
			character_is_potential_important_hostage = no
			# And independent characters likewise have no incentive.
			is_independent_ruler = no
		}
		add = 50
	}
}
raid_base_capture_chance = {
	value = 20

	# Trait: Viking
	if = {
		limit = { has_trait = viking }
		add = 5
	}
	# Dynasty Perk: Practiced Kidnappers
	if = {
		limit = {
			exists = dynasty
			dynasty = { has_dynasty_perk = fp1_pillage_legacy_3 }
		}
		add = 20
	}
}

county_control_loss_value = {
	value = -40

	# Dynasty Perk: No Quarter
	if = {
		limit = {
			root = {
				exists = dynasty
				dynasty = { has_dynasty_perk = fp1_pillage_legacy_5 }
			}
		}
		add = -40
	}
}

raid_county_control_loss_value = {
	value = -10

	# Dynasty Perk: No Quarter
	if = {
		limit = {
			scope:raider = {
				exists = dynasty
				dynasty = { has_dynasty_perk = fp1_pillage_legacy_5 }
			}
		}
		add = -20
	}
}

#############
# CB Costs
#############


scale_10_war_defender_win = {
	value = 10

	if = {
		limit= {
			scope:defender.culture = {
				has_cultural_parameter = more_fame_for_successful_defensive_wars
			}
		}
		multiply = 2
	}
}

######################
# AI Decision Making #
######################
# The two effects below are to be used in combination as "root_military_strength_higher_than_value > target_military_strength_root_value" to check player vs enemy strength
root_military_strength_higher_than_value = { # Once again joe saves the day or erm, script.
	value = 0
	add = max_military_strength # Add num of troops
	if = {
		limit = {
			any_ally = {
				NOT = { has_truce = scope:target_military } 
			}
		}
		every_ally = {
			limit = {
				NOT = { has_truce = scope:target_military }
			}
			add = max_military_strength
		}
	}
	if = {
		limit = { exists = var:ai_strength_multiplier }
		multiply = var:ai_strength_multiplier  # 1.25 == 25% stronger than, remember to potty train your script and have it remove the variable after usage!!
	}
}

target_military_strength_root_value = { # One above calcs player strength (plus multiplier), this one is enemy strenth
	value = 0
	add = scope:target_military.max_military_strength # this should be a character, probably a top liege
	if = {
		limit = {
			any_ally = {
				NOT = { has_truce = root } 
			}
		}
		every_ally = {
			limit =	{
				NOT = { has_truce = root }
			}
			add = max_military_strength
		}
	}
}

war_attacker_total_strength_value = {
	value = 0
	every_war_attacker = { add = max_military_strength }
}

war_defender_total_strength_value = {
	value = 0
	every_war_defender = { add = max_military_strength }
}

war_attacker_total_strength_halved_value = {
	value = war_attacker_total_strength_value
	divide = 2
}

war_defender_total_strength_halved_value = {
	value = war_defender_total_strength_value
	divide = 2
}

war_attacker_total_strength_divided_value = {
	value = war_attacker_total_strength_value
	divide = 10
}

war_defender_total_strength_divided_value = {
	value = war_defender_total_strength_value
	divide = 10
}
