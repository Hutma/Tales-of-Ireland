# On actions for army events, triggered automatically by the game

# called for armies every 30 days; exact date dependent on army ID
# root is the owner of the army
# scope:army is the army

on_army_monthly = {
	events = {
	}
}

# called when a county is (fully) occupied. Does not fire on reoccupation by province owner
# root is the occupant
# scope:county is the county title
# scope:barony is the barony title that got occupied
# scope:previous_controller is the previous controller of the county
# scope:war is the war causing the previous controller and the occupant to be hostile
on_county_occupied = {
	effect = {
		scope:county = {
			if = {
				limit = {
					holder = {
						NOT = { has_perk = enduring_hardships_perk }
					}
				}
				change_county_control = -40
				random_list = {
					25 = {
						change_development_progress_with_overflow = -10
					}
					25 = {
						change_development_progress_with_overflow = -15
					}
					25 = {
						change_development_progress_with_overflow = -20
					}
					25 = {
						change_development_progress_with_overflow = -25
					}
				}
			}
		}
	}
}

# called when a siege completes. Does *not* fire on reoccupation by province order
# root is the occupant
# scope:barony is the barony title that got occupied
# scope:county is the county title for the barony
# scope:previous_controller is the previous controller of the county
# scope:war is the war causing the previous controller and the occupant to be hostile
# occupied_baronies is a list of all baronies that the siege caused the occupier to control (I.E., can include baronies with no fort level)
on_siege_completion = {
	events = {
		siege.0101 # Notify holders/lieges that the county was lost to siege
		siege.0001 # Capture/kill prisoners
		faction_demand.1010 #Reinforce populist rebels
		faction_demand.1110 #Reinforce peasant rebels
	}

}

# Called when a siege loots a holding
# root is sieging character
# scope:barony is the barony title that got looted
# scope:county is the county title for the barony
# scope:previous_controller is the previous controller
on_siege_looting = {
}

# called for armies whenever they enter a province
# root is the owner of the army
# scope:army is the army

on_army_enter_province = {
	events = {
	}
}

# Called when a raid action starts
# root is the raid army
# scope:raider is the person owning the raid army
# scope:barony is the barony title that got raided
# scope:county is the county title for the barony
on_raid_action_start = {
}

# Called when a raid action finishes
# root is the raid army
# scope:raider is the person owning the raid army
# scope:barony is the barony title that got raided
# scope:county is the county title for the barony
on_raid_action_completion = {
	events = {
		raiding.0001 # An independent liege personally raids a county capital.
		raiding.0021 # Adjust raider completion tally.
		raiding.0022 # Chance to fire viking/raider acquisition event
		raiding.0013 # Chance to kidnap prisoners.
	}
	effect = {
		scope:barony.title_province = {
			add_province_modifier = {
				modifier = recently_looted_modifier
				years = 5
			}
			county = {
				if = {
					limit = {
						holder = {
							NOT = { has_perk = enduring_hardships_perk }
						}
					}
					change_county_control = -10
					random_list = {
						25 = {
							change_development_progress_with_overflow = -2
						}
						25 = {
							change_development_progress_with_overflow = -3
						}
						25 = {
							change_development_progress_with_overflow = -4
						}
						25 = {
							change_development_progress_with_overflow = -5
						}
					}
				}
			}
		}
	}
}

# Called every 7 days during a raid action (except if the raid is stalled due to combat). First call might be anywhere from 1 to 7 days after the raid action begins
# root is the raid army
# scope:raider is the person owning the raid army
# scope:barony is the barony title that got raided
# scope:county is the county title for the barony
on_raid_action_weekly = {
}

# Called when a raider returns to their own territory and deposits loot
# Use root.raid_loot to see how much was deposited
# root is the raid army
# scope:raider is the person owning the raid army
on_raid_loot_delivered = {
	events = {
		raiding.0011 # Loot delivered notification.
	}
}

# Called when a raid army is defeated in battle and gets its loot (if any) stolen
# Use root.raid_loot to see how they're carrying
# root is the raid army
# scope:raider is the person owning the raid army
# scope:receiver is the person getting the raid loot
on_defeat_raid_army = {
	events = {
		raiding.0012 # Defending army take raider loot notifications.
	}
}

