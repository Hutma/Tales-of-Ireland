# Called from code after history generation
# Empty scope
on_opening_events = {
    effect = {
		every_player = {
			trigger_event = {
				id = introduction_event.001
			}
		}
	}
}

on_game_start = {
	effect = {
		### GRANDEUR ###
		#Royal Court: Set starting Grandeur to be the same as Expected
		if = {
			limit = {
				has_dlc_feature = royal_court
			}
			every_character_with_royal_court = {
				set_current_court_grandeur = court_grandeur_minimum_expected
				apply_hold_court_grace_effect = yes
				# Stops Hold Court reminders at game start
				set_variable = {
					name = last_hold_court_date
					value = current_year
				}
			}
		}
		
		# Set up anyone who should be in a regency at start whether we have sources or not.
		## If you start as a child, incapable, or imprisoned, you get a regency.
		every_ruler = {
			limit = {
				OR = {
					is_adult = no
					is_incapable = yes
					is_imprisoned = yes
				}
			}
			# We don't want to check over so many characters *twice*, so we check again inside the block to determine what type of regency to put 'em in.
			## Temporary Regencies.
			if = {
				limit = { is_imprisoned = yes }
				trigger_event = {
					id = diarchy.0001
					delayed = yes
				}
			}
			## Entrenched Regencies.
			else = {
				trigger_event = {
					id = diarchy.0011
					delayed = yes
				}
			}
		}
#### TALES OF IRELAND ####
		#Labraid story
		if = {
			limit = {
				character:260000 = {
					is_alive = yes
				}
			}
			character:260000 = {
				trigger_event = {
					id = labraid_story.0001
					days = { 20 50 }
				}
			}
		}
		#Labraid story end
		#High kingship
		every_living_character = {
			if 	= {
				limit = {
					AND = {
						is_independent_ruler = yes
						OR = {
							highest_held_title_tier = 3
							highest_held_title_tier = 4
							highest_held_title_tier = 5
						}
						capital_county.title_province = { geographical_region = ireland_region }
					}
				}
			add_pressed_claim = title:k_high_kingship
			}
		}
		#high kingship end
		
		every_living_character = {
			if = {
				limit = {
					NOT = {
						OR = {
							has_trait = fomorian
							has_trait = cessarian
							has_trait = tuatha_de_danann
							has_trait = celtic_human
							has_trait = fir_bolg
							has_trait = megalith_human
							has_trait = milesian
							has_trait = nemedian
							has_trait = partholonian
							has_trait = hy_brazylian
							has_trait = latin_human
							has_trait = gaelic_giant
							has_trait = scottish_fairy
						}
					}		
				}
				if = {
					limit = {this.culture = { has_cultural_pillar = heritage_fomorian }}
					add_trait = fomorian
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_cessarian}}
					add_trait = cessarian
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_cruithin}}
					add_trait = celtic_human
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_de_danann }}
					add_trait = tuatha_de_danann
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_errain }}
					add_trait = celtic_human
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_laigin }}
					add_trait = celtic_human
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_fir_bolg }}
					add_trait = fir_bolg
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_megalithic }}
					add_trait = megalith_human
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_milesian }}
					add_trait = milesian
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_nemedian }}
					add_trait = nemedian
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_partholonian }}
					add_trait = partholonian
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_hy_brazylian }}
					add_trait = hy_brazylian
				}
				else_if = {
					limit = {has_culture = culture:bann_culture}
						add_trait = megalith_human
					}
				else_if = {
					limit = {has_culture = culture:brythonic_mann}
					add_trait = celtic_human
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_latin }}
					add_trait = latin_human
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_brythonic }}
					add_trait = celtic_human
				}
				else_if = {
					limit = {this.culture = { has_cultural_pillar = heritage_fairy }}
					add_trait = scottish_fairy
				}
				add_trait = celtic_human
			}
		}
#### TALES OF IRELAND ####
	}
	on_actions = {
	}
	
	events = {
		debug_portraits.1 					# Debug portraits for animation testing
	}
}

# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	effect = {
		# Make sure that Realm Priests are landed theocrats where it makes sense
		every_ruler = {
			limit = {
				highest_held_title_tier >= tier_duchy
			}
			if = {
				limit = {
					exists = cp:councillor_court_chaplain
					cp:councillor_court_chaplain = {
						is_ruler = no
					}
					faith = { has_doctrine = doctrine_clerical_succession_spiritual_fixed_appointment }
					any_vassal = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
				}
				random_vassal = {
					limit = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
					weight = {
						base = 1
						modifier = {
							add = 1000
							faith.religious_head ?= this
						}
						modifier = {
							add = learning
						}
						modifier = {
							add = primary_title.tier
						}
					}
					liege = {
						assign_councillor_type = {
							type = councillor_court_chaplain
							remove_existing_councillor = yes
							target = prev
						}
					}
				}
			}
		}
		
		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOM RULER PLACEMENT
		if = {
			limit = { NOT = { has_game_rule = random_ruler_placement_off } }
			game_rule_random_ruler_placement_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes #todo fix
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}
		
		else = { # So that children 10+ starts with a sexuality
			child_sexuality_distribution_effect = yes
		}
		
		# Give Ruler Designer characters regencies.
		every_in_global_list = {
			variable = rd_chars_needing_regencies
			trigger_event = diarchy.0011
			# Aaaand clean the list.
			save_temporary_scope_as = char_temp
			remove_list_global_variable = {
				name = rd_chars_needing_regencies
				target = scope:char_temp
			}
		}

		### ACHIEVEMENT: FROM RAGS TO RICHES
		# every_player = {
			# limit = { highest_held_title_tier = tier_county }
			# add_achievement_global_variable = {
				# VARIABLE = achievement_rags_to_riches_valid
				# VALUE = yes
			# }
		# }
	}

	events = {
		game_rule.1000	#Autopopulate families.
	}
	
	on_actions = {
		on_opening_events
	}
}
