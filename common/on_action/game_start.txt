# Called from code after history generation
# Empty scope
on_opening_events = {
    effect = {
		every_player = {
			trigger_event = {
				id = introduction_event.001
			}
		}
	}
}

on_game_start = {
	events = {
		#Guaranteed historical artifacts fixed spawning
		debug_portraits.1 					# Debug portraits for animation testing
	}
	effect = {
#### TALES OF IRELAND ####
		#vampires
		if = {
			limit = {
				has_trait = irish_vampire
			}
			set_immortal_age = age
		}
		#vampires end
		#Labraid story
		if = {
			limit = {
				character:260000 = {
					is_alive = yes
				}
			}
			character:260000 = {
				trigger_event = {
					id = labraid_story.0001
					days = { 20 50 }
				}
			}
		}
		#Labraid story end
		#High kingship
		every_ruler = {
			if 	= {
				limit = {
					AND = {
						is_independent_ruler = yes
						is_landed = yes
						OR = {
							highest_held_title_tier = 3
							highest_held_title_tier = 4
							highest_held_title_tier = 5
						}
						capital_county.title_province = { geographical_region = ireland_region }
					}
				}
			add_pressed_claim = title:k_high_kingship
			}
		}
		every_independent_ruler = {
			if 	= {
				limit = {
					AND = {
						has_government = feudal_government
						has_trait = seelie_fairy
					}
				}
			add_pressed_claim = title:k_seelie_court
			}
		}
		every_independent_ruler = {
			if 	= {
				limit = {
					AND = {
						has_government = feudal_government
						has_trait = unseelie_fairy
					}
				}
			add_pressed_claim = title:k_unseelie_court
			}
		}
		#high kingship end
		
		every_living_character = {
			if = {
			limit = {this.culture = { has_cultural_pillar = heritage_fomorian }}
				add_trait = fomorian
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_cessarian }}
				add_trait = cessarian
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_cruithin }}
				add_trait = celtic_human
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_de_danann }}
				add_trait = tuatha_de_danann
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_errain }}
				add_trait = celtic_human
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_laigin }}
				add_trait = celtic_human
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_fir_bolg }}
				add_trait = fir_bolg
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_megalithic }}
				add_trait = megalith_human
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_milesian }}
				add_trait = milesian
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_nemedian }}
				add_trait = nemedian
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_partholonian }}
				add_trait = partholonian
			}
			else_if = {
			limit = {has_culture = culture:bann_culture}
				add_trait = megalith_human
			}
			else_if = {
			limit = {has_culture = culture:brythonic_mann}
				add_trait = celtic_human
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_latin }}
				add_trait = latin_human
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_brythonic }}
				add_trait = celtic_human
			}
			else_if = {
			limit = {this.culture = { has_cultural_pillar = heritage_fairy }}
				add_trait = scottish_fairy
			}
			add_trait = celtic_human
		}
		
		every_ruler = {
			limit = {
				exists = dynasty 
				dynasty.dynasty_prestige_level < 2
			}
			if = {
				limit = {
					highest_held_title_tier = 4
					dynasty.dynasty_prestige_level < 2
				}
				dynasty = {
					add_dynasty_prestige_level = 3
				}
			}
			if = {
				limit = {
					highest_held_title_tier = 3
					dynasty.dynasty_prestige_level < 2
				}
				dynasty = {
					add_dynasty_prestige_level = 2
				}
			}
			if = {
				limit = {
					highest_held_title_tier = 2
					dynasty.dynasty_prestige_level < 2
				}
				dynasty = {
					add_dynasty_prestige_level = 1
				}
			}
		}
#### TALES OF IRELAND ####
		### GRANDEUR ###
		#Royal Court: Set starting Grandeur to be the same as Expected
		if = {
			limit = {
				has_dlc_feature = royal_court
			}
			every_character_with_royal_court = {
				set_current_court_grandeur = court_grandeur_minimum_expected
				apply_hold_court_grace_effect = yes
				# Stops Hold Court reminders at game start
				set_variable = {
					name = last_hold_court_date
					value = current_year
				}
			}
		}

		### STRUGGLES ###
	}
}

# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	effect = {
		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOM RULER PLACEMENT
		if = {
			limit = { NOT = { has_game_rule = random_ruler_placement_off } }
			game_rule_random_ruler_placement_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes #todo fix
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}

		### HOLD COURT STARTING GRACE
		every_character_with_royal_court = {
			set_variable = {
				name = hold_court_cooldown
	 			days = standard_hold_court_cooldown_time
	 		}
		}
	}

	events = {
		game_rule.1000	#Autopopulate families.
	}
	
	on_actions = {
		on_opening_events
	}
}
