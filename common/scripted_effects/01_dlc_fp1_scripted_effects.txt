##################################################
# Decisions
##################################################

secure_high_kingdom_north_sea_scripted_effect = {
	
}

found_capital_of_rus_scripted_effect = {
	#Reward fame to compensate for reduced development gain.
	# scope:new_rus_capital.holder = {
		# add_prestige_experience = major_prestige_gain
	# }
	# scope:new_rus_capital = {
		# Boost local development a few levels; majority of development gain is handled in the modifiers now.
		# if = {
			# limit = { development_level < 5 }
			# change_development_level = {
				# value = 5
				# subtract = scope:new_rus_capital.development_level
			# }
		# }
		# else_if = {
			# limit = { development_level < 8 }
			# change_development_level = {
				# value = 8
				# subtract = scope:new_rus_capital.development_level
			# }
		# }
		# else_if = {
			# limit = { development_level < 12 }
			# change_development_level = {
				# value = 12
				# subtract = scope:new_rus_capital.development_level
			# }
		# }
		# If control is less than full, boost it to full.
		# if = {
			# limit = { county_control < full_county_control }
			# change_county_control = 100
		# }
		# Add county modifier giving solid opinion for a decent chunk of time.
		# add_county_modifier = {
			# modifier = capital_of_rus_opinion_modifier
			# years = 20
		# }
		# Add county modifier giving intense benefits for a century.
		# add_county_modifier = {
			# modifier = capital_of_rus_misc_benefits_modifier
			# years = 100
		# }
		# If this county isn't the de jure capital of e_russia, make it so.
		# if = {
			# limit = {
				# NOT = { this = title:e_russia.title_capital_county }
			# }
			# title:e_russia = { set_capital_county = scope:new_rus_capital }
		# }
	# }
}

fp1_apply_generic_stele_bonuses_effect = {
	add_piety = major_piety_gain
	add_prestige = major_prestige_gain
	add_legitimacy = medium_legitimacy_gain
	every_vassal = {
		limit = { fp1_can_raise_stele_trigger = yes }
		custom = fp1_raise_runestone_vassals
		add_opinion = {
			modifier = pleased_opinion
			target = root
			opinion = 10
		}
	}
	# Saga in Stone achievement tracking.
	if = {
		limit = {
			# Grab the player and any dynasty members of theirs.
			any_player = { dynasty = root.dynasty }
		}
		dynasty = {
			# Start a count if we don't have one.
			if = {
				limit = {
					NOT = { exists = var:saga_in_stone_achievement_tally }
				}
				set_variable = {
					name = saga_in_stone_achievement_tally
					value = 1
				}
			}
			# Otherwise, increment it.
			else = {
				change_variable = {
					name = saga_in_stone_achievement_tally
					add = 1
				}
			}
		}
	}
}

elevate_mann_and_the_isles_scripted_effect = {

}

fp1_remove_stele_effect = {
	if = {
		limit = { has_county_modifier = fp1_stele_ancestors_strong }
		remove_county_modifier = fp1_stele_ancestors_strong
	}
	if = {
		limit = { has_county_modifier = fp1_stele_ancestors_weak }
		remove_county_modifier = fp1_stele_ancestors_weak
	}
	if = {
		limit = { has_county_modifier = fp1_stele_conquest_strong }
		remove_county_modifier = fp1_stele_conquest_strong
	}
	if = {
		limit = { has_county_modifier = fp1_stele_conquest_weak }
		remove_county_modifier = fp1_stele_conquest_weak
	}
	if = {
		limit = { has_county_modifier = fp1_stele_promotion_strong }
		remove_county_modifier = fp1_stele_promotion_strong
	}
	if = {
		limit = { has_county_modifier = fp1_stele_promotion_weak }
		remove_county_modifier = fp1_stele_promotion_weak
	}
}

forge_the_jomsvikings_scripted_effect = {
	# Display simplified results.
	# custom_tooltip = create_holy_order_decision_effect_message
	# Select a random county.
	# random_held_title = {
		# limit = { fp1_valid_county_for_jomsvikings_trigger = yes }
		# save_scope_as = designated_county
	# }
	# Select an appropriate barony.
	# If there's an empty space in the capital, we create a castle.
	# if = {
		# limit = {
			# scope:designated_county = {
				# any_county_province = { has_holding = no }
			# }
		# }
		# scope:designated_county = {
			# random_county_province = {
				# limit = { has_holding = no }
				# set_holding_type = castle_holding
				# barony = { save_scope_as = leased_barony }
			# }
		# }
	# }
	# Otherwise, grab an existing non-capital castle/city.
	# else = {
		# scope:designated_county = {
			# random_county_province = {
				# limit = {
					# is_county_capital = no
					# OR = {
						# has_holding_type = castle_holding
						# has_holding_type = city_holding
					# }
				# }
				# barony = { save_scope_as = leased_barony }
			# }
		# }
	# }
	# Create a suitable leader for the Jomsvikings.
	# create_character = {
		# template = fp1_jomsviking_bigwig
		# location = scope:leased_barony.title_province
		# save_scope_as = leader
	# }
	# Create the actual holy order.
	# create_holy_order_neutral_effect = {
		# LEADER = scope:leader
		# CAPITAL = scope:leased_barony
		# NEW_HO_SCOPE = new_holy_order
		# FOUNDER = scope:founder
	# }
	# hidden_effect = {
		# scope:leader = {
			# add_trait = order_member
			# add_piety_level = 2
			# add_gold = holy_order_starting_gold
			# every_courtier = { add_trait = order_member }
		# }
	# }
	# Make the local settlement Jomsberg.
	# Rename it.
	# scope:leased_barony = { set_title_name = b_jomsberg }
	# Give it some buildings.
	# hidden_effect = {
		# scope:leased_barony.title_province = {
			# Walls & Towers.
			# if = {
				# limit = {
					# NOT = { has_building_or_higher = curtain_walls_01 }
				# }
				# If it doesn't have a free building slot, give it one.
				# if = {
					# limit = { free_building_slots = 0 }
					# add_province_modifier = extra_building_slot
				# }
				# Add the building.
				# add_building = curtain_walls_01
			# }
			# Barracks.
			# if = {
				# limit = {
					# NOT = { has_building_or_higher = barracks_01 }
				# }
				# If it doesn't have a free building slot, give it one.
				# if = {
					# limit = { free_building_slots = 0 }
					# add_province_modifier = extra_building_slot
				# }
				# Add the building.
				# add_building = barracks_01
			# }
			# Military Camps.
			# if = {
				# limit = {
					# NOT = { has_building_or_higher = military_camps_01 }
				# }
				# If it doesn't have a free building slot, give it one.
				# if = {
					# limit = { free_building_slots = 0 }
					# add_province_modifier = extra_building_slot
				# }
				# Add the building.
				# add_building = military_camps_01
			# }
		# }
	# }
	# Mark it so it can be renamed if the order is ever destroyed.
	# set_global_variable = {
		# name = jomsberg_location
		# value = scope:leased_barony
	# }
	# And the Grandmaster of Jomsberg certainly looks favourably on their patron.
	# Hidden because the title doesn't play nicely with characters created in the same immediate block.
	# hidden_effect = {
		# scope:founder = { set_relation_friend = { reason = friend_forging_jomsvikings target = scope:leader } }
	# }
	# Mark the Jomsvikings as existing & make them easily accessible
	# set_global_variable = {
		# name = jomsvikings_title
		# value = scope:leader.primary_title
	# }
	# Achievement flag.
	# Some minor misc effects.
	# create_holy_order_effect = yes
	# scope:leader.primary_title = { set_coa = ho_jomsvikings }
	# Flag the Jomsvikings as forged.
	# hidden_effect = {
		# add_to_global_variable_list = {
			# name = unavailable_unique_decisions
			# target = flag:flag_forged_jomvikings
		# }
	# }
}

forge_the_jomsvikings_maa_reward_effect = {

}

forge_the_jomsvikings_decision_tooltip_effect = {
	# Standard info.
	# custom_tooltip = create_holy_order_decision_effect_message
	# create_holy_order_effect = yes
	# And the free army.
	# forge_the_jomsvikings_maa_reward_effect = yes
}

fp1_remove_humsac_offended_counties_effect = {
	every_sub_realm_county = {
		if = {
			limit = { has_county_modifier = held_human_sacrifice_fp1_modifier }
			remove_county_modifier = held_human_sacrifice_fp1_modifier
		}
	}
}

##################################################
# Interactions
##################################################

designate_gruesome_festivals_sacrifice_interaction_effect = {
	add_character_modifier = gruesome_festivals_designated_sacrifice_fp1_modifier
	add_opinion = {
		target = scope:actor
		modifier = hate_opinion
		opinion = -50
	}
}

designate_gruesome_festivals_sacrifice_modifier_removed_effect = {
	send_interface_toast = {
		title = designate_gruesome_festivals_sacrifice_modifier_removed_effect.t
		left_icon = $DESIGNATOR$
		remove_character_modifier = gruesome_festivals_designated_sacrifice_fp1_modifier
		# Removed manually.
		if = {
			limit = {
				exists = scope:removal_type
				scope:removal_type = flag:manual
			}
			custom_tooltip = designate_gruesome_festivals_sacrifice_modifier_removed_effect.manual.tt
		}
		# Removed due to a new chief sacrifice being designated.
		else_if = {
			limit = {
				exists = scope:removal_type
				scope:removal_type = flag:override
			}
			custom_tooltip = designate_gruesome_festivals_sacrifice_modifier_removed_effect.override.tt
		}
		# Removed due to the chain invalidating.
		else = { custom_tooltip = designate_gruesome_festivals_sacrifice_modifier_removed_effect.invalidation.tt }
	}
}

# Either-side effects for a tbc ending with death.
fp1_tbc_death_effect = {
	# Check to see if this is a duel to the death between those of equal rank.
	## We check this here in case an *untimely* death causes either participant to go up a rank.
	## Equal rank: level playing field, maximum honour.
	if = {
		limit = { $TBC_VICTOR$.primary_title.tier = $TBC_LOSER$.primary_title.tier }
		$TBC_VICTOR$ = { add_prestige = medium_prestige_gain }
	}
	## Unequal rank: challenging your betters but clearly it was merited.
	else_if = {
		limit = { $TBC_VICTOR$.primary_title.tier < $TBC_LOSER$.primary_title.tier }
		$TBC_VICTOR$ = { add_prestige = minor_prestige_gain }
	}
	$TBC_LOSER$ = {
		death = {
			killer = $TBC_VICTOR$
			death_reason = death_duel
		}
	}
}

# Recipient-side effects for a tbc ending with a cash settlement.
fp1_tbc_gold_effect = {
	$TBC_LOSER$ = {
		pay_short_term_gold = {
			target = $TBC_VICTOR$
			gold = major_gold_value
		}
	}
}

# Recipient-side effects for a tbc ending with an agreed favour.
fp1_tbc_hook_effect = {
	$TBC_VICTOR$ = {
		add_hook = {
			type = trial_by_combat_hook
			target = $TBC_LOSER$
		}
	}
}

# Recipient-side effects for a tbc ending with utter humiliation.
fp1_tbc_humiliation_effect = {
	$TBC_LOSER$ = { add_stress = massive_stress_gain }
}

# Actor-side effects for losing most types of tbc.
fp1_tbc_actor_defeated_effect = {
	$TBC_LOSER$ = { add_stress = major_stress_gain }
}

try_create_challenge_to_single_combat = {
	if = {
		limit = {
			is_imprisoned = no
			root = { has_imprisonment_reason = prev }
		}
		try_create_important_action = {
			important_action_type = action_can_challenge_to_single_combat
			actor = root
			recipient = this
		}
	}
}

replace_with_learning_trait_effect = {
	if = {
		limit = { has_trait = education_intrigue_1 }
		remove_trait = education_intrigue_1
	}
	else_if = {
		limit = { has_trait = education_intrigue_2 }
		remove_trait = education_intrigue_2
	}
	else_if = {
		limit = { has_trait = education_intrigue_3 }
		remove_trait = education_intrigue_3
	}
	else_if = {
		limit = { has_trait = education_intrigue_4 }
		remove_trait = education_intrigue_4
	}
	else_if = {
		limit = { has_trait = education_intrigue_5 }
		remove_trait = education_intrigue_5
	}
	else_if = {
		limit = { has_trait = education_diplomacy_1 }
		remove_trait = education_diplomacy_1
	}
	else_if = {
		limit = { has_trait = education_diplomacy_2 }
		remove_trait = education_diplomacy_2
	}
	else_if = {
		limit = { has_trait = education_diplomacy_3 }
		remove_trait = education_diplomacy_3
	}
	else_if = {
		limit = { has_trait = education_diplomacy_4 }
		remove_trait = education_diplomacy_4
	}
	else_if = {
		limit = { has_trait = education_diplomacy_5 }
		remove_trait = education_diplomacy_5
	}
	else_if = {
		limit = { has_trait = education_stewardship_1 }
		remove_trait = education_stewardship_1
	}
	else_if = {
		limit = { has_trait = education_stewardship_2 }
		remove_trait = education_stewardship_2
	}
	else_if = {
		limit = { has_trait = education_stewardship_3 }
		remove_trait = education_stewardship_3
	}
	else_if = {
		limit = { has_trait = education_stewardship_4 }
		remove_trait = education_stewardship_4
	}
	else_if = {
		limit = { has_trait = education_stewardship_5 }
		remove_trait = education_stewardship_5
	}
	else_if = {
		limit = { has_trait = education_martial_1 }
		remove_trait = education_martial_1
	}
	else_if = {
		limit = { has_trait = education_martial_2 }
		remove_trait = education_martial_2
	}
	else_if = {
		limit = { has_trait = education_martial_3 }
		remove_trait = education_martial_3
	}
	else_if = {
		limit = { has_trait = education_martial_4 }
		remove_trait = education_martial_4
	}
	else_if = {
		limit = { has_trait = education_martial_5 }
		remove_trait = education_martial_5
	}
	random_list = {
		2 = { add_trait = education_learning_2 }
		2 = { add_trait = education_learning_3 }
		1 = { add_trait = education_learning_4 }
	}
}

##################################################
# CBs
##################################################

clean_scandinavian_adventurer_effect = {
	scope:attacker = {
		every_held_title = {
			limit = { has_variable = temporary_title }
			save_scope_as = destroyable_title
			scope:attacker = { destroy_title = scope:destroyable_title }
		}
		remove_character_modifier = scandinavian_adventurer_fp1_modifier
	}
}

fp1_add_realm_size_appropriate_sa_reprieve_effect = {
	# Depending on the sub realm size of $VICTIM$, we give them a scaling amount of time not to be hit by SA attacks.
	## The smallest realms get a long reprieve.
	if = {
		limit = { sub_realm_size <= tiny_realm_size }
		add_character_modifier = {
			modifier = fp1_reprieve_from_sa_modifier
			years = 20
		}
	}
	## Then a decent reprieve.
	else_if = {
		limit = { sub_realm_size <= minor_realm_size }
		add_character_modifier = {
			modifier = fp1_reprieve_from_sa_modifier
			years = 15
		}
	}
	## Then a short reprieve.
	else_if = {
		limit = { sub_realm_size <= medium_realm_size }
		add_character_modifier = {
			modifier = fp1_reprieve_from_sa_modifier
			years = 10
		}
	}
	## Then you're clearly too big and juicy a target for much reprieve at all.
	else = {
		add_character_modifier = {
			modifier = fp1_reprieve_from_sa_modifier
			years = 5
		}
	}
}

fp1_remember_recent_conquest_victory_effect = {
	if = {
		limit = {
			# DLC check.
			has_fp1_dlc_trigger = yes
			# Is the culture eligible?
			fp1_can_raise_stele_trigger = yes
		}
		set_variable = {
			name = recent_conquest_victory
			value = scope:defender
			years = 5
		}
	}
}

##################################################
# Yearlies
##################################################

nithing_character_creation_scripted_effect = {
	add_trait = disinherited
	add_character_modifier = { modifier = nithing_fp1_modifier }
}

##################################################
# Legacies
##################################################

initial_decentralized_rule_friends_modifier_effect = {
	if = {
		limit = {
			exists = dynasty
			is_ruler = yes
		}
		if = {
			limit = {
				NOT = { has_variable = decentralized_rule_perk_value } 
			}
			set_variable = {
				name = decentralized_rule_perk_value
				value = 0
			}
		}
		
		every_relation = {
			type = friend
			add_to_temporary_list = decentralized_rule_friends
		}
		every_relation = {
			type = best_friend
			add_to_temporary_list = decentralized_rule_friends
		}

		if = {
			limit = {
				exists = var:decentralized_rule_perk_value
				save_temporary_scope_as = affected_friend
				var:decentralized_rule_perk_value < decentralized_rule_max
				any_in_list = {
					list = decentralized_rule_friends
					count > scope:affected_friend.var:decentralized_rule_perk_value 
				}
			}
			add_character_modifier = {
				modifier = decentralized_rule_perk_modifier
			}
			change_variable = {
				name = decentralized_rule_perk_value
				add = 1
			}
		}	
	}
}

decentralized_rule_friends_modifier_effect = {
	if = {
		limit = {
			exists = dynasty
			dynasty = {
				has_dynasty_perk = fp1_adventure_legacy_5
			}
			is_ruler = yes
		}
		if = {
			limit = {
				NOT = { has_variable = decentralized_rule_perk_value } 
			}
			set_variable = {
				name = decentralized_rule_perk_value
				value = 0
			}
		}
		
		every_relation = {
			type = friend
			add_to_temporary_list = decentralized_rule_friends
		}
		every_relation = {
			type = best_friend
			add_to_temporary_list = decentralized_rule_friends
		}

		if = {
			limit = {
				exists = var:decentralized_rule_perk_value
				save_temporary_scope_as = affected_friend
				var:decentralized_rule_perk_value < decentralized_rule_max
				any_in_list = {
					list = decentralized_rule_friends
					count > scope:affected_friend.var:decentralized_rule_perk_value 
				}
			}
			add_character_modifier = {
				modifier = decentralized_rule_perk_modifier
			}
			change_variable = {
				name = decentralized_rule_perk_value
				add = 1
			}
		}	
	}
}

decentralized_rule_removal_effect = {
	if = {
		limit = {
			exists = dynasty
			dynasty = {
				has_dynasty_perk = fp1_adventure_legacy_5
			}
		}

		every_relation = {
			type = friend
			add_to_temporary_list = decentralized_rule_friends
		}
		every_relation = {
			type = best_friend
			add_to_temporary_list = decentralized_rule_friends
		}

		if = {
			limit = {
				exists = var:decentralized_rule_perk_value
				save_temporary_scope_as = affected_friend
				var:decentralized_rule_perk_value <= decentralized_rule_max
				var:decentralized_rule_perk_value > 0
				any_in_list = {
					list = decentralized_rule_friends
					count < var:decentralized_rule_perk_value
					NOT = { has_character_flag = about_to_die_but_not_dead_yet_flag  }
				}
			}
			
			if = {
				limit = {
					has_character_modifier = decentralized_rule_perk_modifier
				}
				remove_character_modifier = decentralized_rule_perk_modifier
			}
		
			change_variable = {
				name = decentralized_rule_perk_value
				subtract = 1
			}
		}
	}
}

##################################################
# Governments
##################################################

calculate_authority_cooldown_break_effect = {
	if = {
		limit = {
			has_variable = crown_authority_cooldown
			realm_law_use_crown_authority = yes
		}
		# Set it up if it doesn't exist.
		if = {
			limit = {
				NOT = { has_variable = authority_cooldown_break_tally }
			}
			set_variable = {
				name = authority_cooldown_break_tally
				value = authority_cooldown_breaker_value
			}
			# And increment it once, since they've just taken the first use and we give no freebies.
			change_variable = {
				name = authority_cooldown_break_tally
				add = authority_cooldown_breaker_value
			}
		}
		# Otherwise, increment it.
		else_if = {
			limit = { has_variable = authority_cooldown_break_tally }
			change_variable = {
				name = authority_cooldown_break_tally
				add = authority_cooldown_breaker_value
			}
		}
	}
	else_if = {
		limit = {
			has_variable = tribal_authority_cooldown
			realm_law_use_tribal_authority = yes
		}
		# Set it up if it doesn't exist.
		if = {
			limit = {
				NOT = { has_variable = authority_cooldown_break_tally }
			}
			set_variable = {
				name = authority_cooldown_break_tally
				value = authority_cooldown_breaker_value
			}
			# And increment it once, since they've just taken the first use and we give no freebies.
			change_variable = {
				name = authority_cooldown_break_tally
				add = authority_cooldown_breaker_value
			}
		}
		# Otherwise, increment it.
		else_if = {
			limit = { has_variable = authority_cooldown_break_tally }
			change_variable = {
				name = authority_cooldown_break_tally
				add = authority_cooldown_breaker_value
			}
		}
	}
	else_if = {
		limit = {
			has_variable = imperial_bureaucracy_cooldown
			realm_law_use_imperial_bureaucracy = yes
		}
		# Set it up if it doesn't exist.
		if = {
			limit = {
				NOT = { has_variable = authority_cooldown_break_tally }
			}
			set_variable = {
				name = authority_cooldown_break_tally
				value = authority_cooldown_breaker_value
			}
			# And increment it once, since they've just taken the first use and we give no freebies.
			change_variable = {
				name = authority_cooldown_break_tally
				add = authority_cooldown_breaker_value
			}
		}
		# Otherwise, increment it.
		else_if = {
			limit = { has_variable = authority_cooldown_break_tally }
			change_variable = {
				name = authority_cooldown_break_tally
				add = authority_cooldown_breaker_value
			}
		}
	}
}
