# Shown when an important decision/interaction is available.

#DECISONS
#check_create_action is called for each decision that the player has marked as important and that can be taken.
# The scope passed in to check_create_action and effect contains scope:decision_type which is a flag that specifies the decision type.
action_take_decision = {
	type = alert
	check_create_action = {
		# already filtered to only important decisions

		try_create_important_action = {
			important_action_type = action_take_decision
		}
	}

	effect = {
		scope:decision_type = {
			open_view_data = decision_detail
		}
	}
}


#INTERACTIONS
action_ask_for_pardon = {
	priority = 900
	check_create_action = {
		if = {
			limit = {
				ask_for_pardon_available_trigger = { ACTOR = root }
				OR = {
					has_hook = top_liege
					reverse_opinion = {
						target = top_liege
						value >= 50 #minimum value for agreeing to pardon
					}
				}
			}
			try_create_important_action = {
				important_action_type = action_ask_for_pardon
				actor = root
				recipient = top_liege
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = ask_for_pardon_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}

action_convert_at_war_interaction = {
	priority = 1000
	check_create_action = {
		if = {
			limit = { faith = { has_doctrine_parameter = unreformed } }
			every_character_war = {
				limit = {
					primary_defender = root
					using_non_ghw_holy_war_cb_trigger = yes
					primary_attacker.max_military_strength > primary_defender.max_military_strength
				}
				primary_attacker = { save_scope_as = attacker }
				if = {
					limit = {
						root = {
							is_character_interaction_valid = {
								recipient = scope:attacker
								interaction = convert_at_war_interaction
							}
						}
					}
					primary_defender = {
						try_create_important_action = {
							important_action_type = action_convert_at_war_interaction
							actor = root
							recipient = scope:attacker
						}
					}
				}
			}
		}
	}

	effect = {
		open_interaction_window = {
			interaction = convert_at_war_interaction
			actor = scope:actor
			recipient = scope:recipient
		}
	}
}
