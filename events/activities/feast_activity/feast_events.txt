# Events for handling the Feast activity
# Main events are handled in separate event files


namespace = feast


# 0000-0999: Maintenance and selection events
# 0100-0199: Special Main Event selection
# 1000-1999: Host preparation events
# 2000-2999: Guest preparation events
# 3000-3999: Host regular start events
# 4000-4999: Host special start events
# 5000-5999: Guest regular start events
# 6000-6999: Guest special start events


# MAINTENANCE EVENTS
# 0000 - 0999


feast.0001 = {
	hidden = yes

	immediate = {
	#Look for various conditions for host events to address:

		# Look for a target you're trying to befriend
		if = {
			limit = {
				any_scheme = {
					scheme_type = befriend
					scheme_target = {
						in_activity_with = scope:activity.activity_owner
					}
				}
			}
			random_scheme = {
				limit = {
					scheme_type = befriend
					scheme_target = { in_activity_with = scope:activity.activity_owner }
				}
				scheme_target = {
					scope:activity = {
						set_variable = {
							name = potential_friend
							value = prev
						}
					}
				}
				scheme_freeze_days = 10
			}
		}

		#Give all participants start feast events
		scope:activity = {
			every_participant = {
				if = { #You're busy at another party! (invites were sent the same day, but you agreed to another party after this one )
					limit = {
						exists = var:booked_for_a_party
						var:booked_for_a_party = { NOT = { this = scope:activity.activity_owner } }
					}
					trigger_event = feast.0010
				}
				else = {
					trigger_event = {
						on_action = feast_start_events
					}
				}
			}
		}
	}
}



#####################
# Double booked - cancellation event
# by Linnéa Thimrén
#####################
feast.0010 = {
	type = letter_event
	opening = {
		desc = feast.1501.opening
	}
	desc = feast.0010.desc
	sender = scope:activity.activity_owner

	immediate = {
		var:booked_for_a_party = {
			save_scope_as = other_host
		}
		scope:activity = {
			decline_invitation_for_character = root
		}
		scope:activity.activity_owner = {
			add_opinion = {
				target = root
				modifier = insult_opinion
				opinion = -10
			}
		}
	}

	option = {
		name = feast.0010.a
		
	}
}


######################
# INVITATION EVENTS
# 1500 - 1999
# by Petter Vilberg
######################

#Vassals
feast.1501 = {
	type = letter_event
	opening = {
		desc = feast.1501.opening
	}
	desc = {
		desc = feast.1501.opening_desc
		first_valid = {
			triggered_desc = {
				trigger = {
					reverse_opinion = {
						target = scope:sender
						value > 50
					}
				}
				desc = feast.1501.host_likes_me
			}
			triggered_desc = {
				trigger = {
					reverse_opinion = {
						target = scope:sender
						value > -1
					}
				}
				desc = feast.1501.host_gets_along_with_me
			}
			desc = feast.1501.host_dislikes_me
		}
	}
	sender = scope:sender

	trigger = {
		is_available_for_activity_trigger = yes
		exists = scope:activity.activity_owner
		target_is_liege_or_above = scope:activity.activity_owner
		NOT = { exists = var:is_handling_feast_invitation }
	}

	on_trigger_fail = { #Trigger invitation again if it was blocked because the character was handling another invitation
		if = {
			limit = {
				is_available_for_activity_trigger = yes
				exists = var:is_handling_feast_invitation
			}
			trigger_event = {
				id = feast.1501
				days = 1
			}
		}
	}

	immediate = {
		scope:activity.activity_owner = {
			save_scope_as = sender
		}
		scope:activity.activity_province = {
			barony = {
				save_scope_as = barony
			}
		}
		set_variable = {
			name = is_handling_feast_invitation
			value = scope:sender
			days = 20
		}
	}

	option = {
		name = feast.1501.a
		trigger = {
			opinion = {
				target = liege
				value >= 0
			}
		}
		play_music_cue = mx_cue_banquet
		scope:activity = {
			accept_invitation_for_character = prev
		}
		set_variable = {
			name = booked_for_a_party
			value = scope:sender
			days = 20
		}
		stress_impact = {
			comfort_eater = minor_stress_loss
			drunkard = minor_stress_loss
		}
		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:sender
			}
		}
	}

	option = {
		name = feast.1501.b
		trigger = {
			opinion = {
				target = liege
				value < 0
			}
		}
		play_music_cue = mx_cue_banquet
		scope:activity = {
			accept_invitation_for_character = prev
		}
		set_variable = {
			name = booked_for_a_party
			value = scope:sender
			days = 20
		}
		stress_impact = {
			comfort_eater = minor_stress_loss
			drunkard = minor_stress_loss
		}
		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:sender
			}
		}
	}

	option = {
		name = feast.1501.c
		trigger = {
			opinion = {
				target = liege
				value > -1
			}
		}
		scope:activity = {
			decline_invitation_for_character = prev
		}
		stress_impact = {
			inappetetic = minor_stress_loss
			reclusive = minor_stress_loss
		}
		if = {
			limit = {
				faith = {
					has_doctrine_parameter = mandatory_feast_attendance
				}
			}
			add_piety_level = -1
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_boldness = 0.2
			}
			modifier = {
				add = -50
				faith = {
					has_doctrine_parameter = mandatory_feast_attendance
				}
			}
		}
	}

	option = {
		name = feast.1501.d
		trigger = {
			opinion = {
				target = liege
				value < 0
			}
		}
		scope:activity = {
			decline_invitation_for_character = prev
		}
		stress_impact = {
			inappetetic = minor_stress_loss
			reclusive = minor_stress_loss
		}
		if = {
			limit = {
				faith = {
					has_doctrine_parameter = mandatory_feast_attendance
				}
			}
			add_piety_level = -1
		}
		ai_chance = {
			base = 10
			ai_value_modifier = {
				ai_boldness = 0.2
				ai_vengefulness = 0.5
			}
			modifier = {
				add = -50
				faith = {
					has_doctrine_parameter = mandatory_feast_attendance
				}
			}
		}
	}

	after = {
		remove_variable = is_handling_feast_invitation
	}
}


#Liege
feast.1502 = {
	type = letter_event
	opening = {
		desc = feast.1501.opening
	}
	desc = feast.1502.desc
	sender = scope:sender

	trigger = {
		is_available_for_activity_trigger = yes
		NOT = { exists = var:is_handling_feast_invitation }
	}

	on_trigger_fail = { #Trigger invitation again if it was blocked because the character was handling another invitation
		if = {
			limit = {
				is_available_for_activity_trigger = yes
				exists = var:is_handling_feast_invitation
			}
			trigger_event = {
				id = feast.1502
				days = 1
			}
		}
	}

	immediate = {
		scope:activity.activity_owner = {
			save_scope_as = sender
		}
		scope:activity.activity_province = {
			barony = {
				save_scope_as = barony
			}
		}
		set_variable = {
			name = is_handling_feast_invitation
			value = scope:sender
			days = 20
		}
	}

	option = {
		name = feast.1502.a
		play_music_cue = mx_cue_banquet
		scope:activity = {
			accept_invitation_for_character = prev
		}
		set_variable = {
			name = booked_for_a_party
			value = scope:sender
			days = 20
		}
		stress_impact = {
			comfort_eater = minor_stress_loss
			drunkard = minor_stress_loss
		}
		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:sender
			}
		}
	}

	option = {
		name = feast.1502.b
		ai_chance = {
			base = 10
			modifier = {
				add = 15
				target_is_liege_or_above = scope:sender
			}
			ai_value_modifier = {
				ai_boldness = 0.2
			}
		}
		scope:activity = {
			decline_invitation_for_character = prev
		}
		stress_impact = {
			inappetetic = minor_stress_loss
			reclusive = minor_stress_loss
		}
	}

	after = {
		remove_variable = is_handling_feast_invitation
	}
}


#Other relations
feast.1503 = {
	type = letter_event
	opening = {
		desc = feast.1501.opening
	}
	desc = feast.1503.desc
	sender = scope:sender

	trigger = {
		is_available_for_activity_trigger = yes
		NOT = { exists = var:is_handling_feast_invitation }
	}

	on_trigger_fail = { #Trigger invitation again if it was blocked because the character was handling another invitation
		if = {
			limit = {
				is_available_for_activity_trigger = yes
				exists = var:is_handling_feast_invitation
			}
			trigger_event = {
				id = feast.1503
				days = 1
			}
		}
	}

	immediate = {
		scope:activity.activity_owner = {
			save_scope_as = sender
		}
		scope:activity.activity_province = {
			barony = {
				save_scope_as = barony
			}
		}
		set_variable = {
			name = is_handling_feast_invitation
			value = scope:sender
			days = 20
		}
	}

	option = {
		name = feast.1503.a
		play_music_cue = mx_cue_banquet
		scope:activity = {
			accept_invitation_for_character = prev
		}
		set_variable = {
			name = booked_for_a_party
			value = scope:sender
			days = 20
		}
		stress_impact = {
			comfort_eater = minor_stress_loss
			drunkard = minor_stress_loss
		}
		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:sender
			}
		}
	}

	option = {
		name = feast.1503.b
		scope:activity = {
			decline_invitation_for_character = prev
		}
		stress_impact = {
			inappetetic = minor_stress_loss
			reclusive = minor_stress_loss
		}
		ai_chance = {
			base = 10
			modifier = {
				add = 15
				scope:sender = {
					target_is_liege_or_above = scope:sender
				}
			}
			ai_value_modifier = {
				ai_boldness = 0.2
			}
		}
	}

	after = {
		remove_variable = is_handling_feast_invitation
	}
}


#################
# START EVENTS FOR HOST
# 2000 - 2499
#################

# HOST: Time to start the feast!
# Generic start event.
# by Petter Vilberg and Linnéa Thimrén
######
feast.2001 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:murder_feast
				}
				desc = feast.2001.t_murder
			}
			desc = feast.2001.t
		}
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					exists = scope:murder_feast
				}
				desc = feast.2001.desc_murder_feast
			}
			desc = feast.2001.desc
		}
	}
	theme = feast_activity
	left_portrait = root
	right_portrait = scope:enemy_1
	lower_right_portrait = scope:enemy_2

	trigger = {
		this = scope:activity.activity_owner
	}

	immediate = {
		play_music_cue = mx_cue_banquet
		if = {
			limit = { #The murder feast will only happen for players
				is_ai = no
				NOT = { #Blocked (for now) if any participant is a player
					scope:activity = {
						any_participant = {
							NOT = { this = root }
							is_ai = no
						}
					}
				}
			}
			if = {
				limit = {
					any_scheme = {
						scheme_type = murder
						scheme_target = {
							is_ai = yes
							scope:activity = {
								is_target_participating = prev
							}
						}
					}
				}
				every_scheme = {
					limit = {
						scheme_type = murder
						scheme_target = {
							is_ai = yes
							scope:activity = {
								is_target_participating = prev
							}
						}
					}
					scheme_target = {
						add_to_list = murder_feast_enemies
					}
				}
			}
			if = {
				limit = {
					any_relation = {
						type = rival
						is_ai = yes
						scope:activity = {
							is_target_participating = prev
						}
					}
				}
				every_relation = {
					type = rival
					limit = {
						is_ai = yes
						scope:activity = {
							is_target_participating = prev
						}
					}
					add_to_list = murder_feast_enemies
				}
			}
		}
		hidden_effect = {
			random_list = {
				60 = {
					trigger = {
						any_in_list = {
							list = murder_feast_enemies
							count >= 2
						}
					}
					ai_value_modifier = {
						ai_vengefulness = 0.75
					}
					modifier = {
						factor = 2
						any_in_list = {
							list = murder_feast_enemies
							count >= 3
						}
					}
					modifier = {
						factor = 5
						has_trait = lunatic
					}
					modifier = {
						factor = 2
						has_trait = sadistic
					}
					modifier = {
						factor = 5
						any_in_list = {
							list = murder_feast_enemies
							any_relation = {
								type = nemesis
								this = scope:activity.activity_owner
							}
						}
					}
					save_scope_value_as = {
						name = murder_feast
						value = yes
					}
					random_in_list = {
						list = murder_feast_enemies
						save_scope_as = enemy_1
					}
					random_in_list = {
						list = murder_feast_enemies
						limit = {
							NOT = { this = scope:enemy_1 }
						}
						save_scope_as = enemy_2
					}
				}
				40 = {
					ai_value_modifier = {
						ai_compassion = 0.75
					}
				}
			}
		}
	}

	option = {
		name = feast.2001.a
		trigger ={
			NOT = { exists = scope:murder_feast }
		}
		exclusive = yes
		custom_tooltip = feast.2001.a.tt
	}

	option = {
		name = feast.2001.b
		trigger = {
			exists = scope:murder_feast
		}
		custom_tooltip = feast.2001.a.tt
	}

	option = { #Murder feast!
		name = feast.2001.c
		trigger = {
			exists = scope:murder_feast
		}
		set_variable = {
			name = murder_feast
			value = 0
		}
		trigger_event = feast_default.0001
		custom_tooltip = feast.2001.c.tt
	}

	option = { #Murder feast! - Spare people you care about
		name = feast.2001.d
		trigger = {
			exists = scope:murder_feast
			scope:activity = {
				any_participant = {
					NOT = { this = root }
					OR = {
						has_any_good_relationship_with_root_trigger = yes
						AND = {
							is_close_or_extended_family_of = root
							reverse_opinion = {
								target = root
								value >= 10
							}
							has_any_bad_relationship_with_root_trigger = no
						}
					}
				}
			}
		}
		set_variable = {
			name = murder_feast
			value = 0
		}
		trigger_event = feast_default.0001
		custom_tooltip = feast.2001.c.tt
		custom_tooltip = feast.2001.c.people_to_spare
		scope:activity = {
			every_participant = {
				limit = {
					NOT = { this = root }
					OR = {
						has_any_good_relationship_with_root_trigger = yes
						AND = {
							is_close_or_extended_family_of = root
							reverse_opinion = {
								target = root
								value >= 10
							}
							has_any_bad_relationship_with_root_trigger = no
						}
					}
				}
				add_character_flag = {
					flag = murder_feast_to_spare
					days = 50
				}
			}
		}
	}
}


# HOST: You didn't show up! - FALLBACK FOR WEIRDNESS
# Bad relations with all guests
# by Petter Vilberg
###
feast.2002 = {
	type = character_event
	title = feast.2002.t
	desc = feast.2002.desc
	theme = feast_activity

	immediate = {
		scope:activity = {
			every_participant = {
				trigger_event = feast.2502
			}
		}
	}

	option = {
		name = feast.2002.a
		show_as_tooltip = {
			scope:activity = {
				every_participant = {
					custom = every_guest_scope_tt
					add_opinion = {
						modifier = feast_host_failed_to_appear
						target = scope:activity.activity_owner
					}
				}
				complete_activity = no
			}
		}
	}
}


# HOST: No guests showed up
# You're so alone.
# by Petter Vilberg
###
feast.2003 = {
	type = character_event
	title = feast.2003.t
	desc = feast.2003.desc
	theme = feast_activity
	left_portrait = scope:activity.activity_owner
	
	immediate = {
		scope:activity = {
			complete_activity = no
		}
	}

	option = {
		name = feast.2003.a
		stress_impact = {
			base = minor_stress_impact_gain
			gregarious = minor_stress_impact_gain
		}
	}

	option = {
		name = feast.2003.b
		trigger = {
			has_trait = shy
		}
		exclusive = yes
		trait = shy
		stress_impact = {
			base = minor_stress_impact_loss
		}
	}
}


####################
# START EVENTS FOR GUESTS
# 2500 - 2999
####################

# GUESTS: TIME TO START THE FEAST!
# Generic start event
# by Petter Vilberg
###
feast.2501 = {
	type = character_event
	title = feast.2501.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						has_relation_rival = scope:activity.activity_owner
					}
					reverse_opinion = {
						target = scope:activity.activity_owner
						value < -40
					}
				}
				desc = feast.2501.dislikes_host
			}
			desc = feast.2501.likes_host
		}
	}
	theme = feast_activity
	left_portrait = {
		character = scope:activity.activity_owner
		animation = happiness
	}

	trigger = {
		# Guests only.
		NOT = { this = scope:activity.activity_owner }
	}

	immediate = {
		play_music_cue = mx_cue_banquet
	}

	option = {
		name = {
			trigger = { has_trait = gluttonous }
			text = feast.2501.a.gluttonous
		}
		name = {
			trigger = { has_trait = drunkard }
			text = feast.2501.a.drunkard
		}
		name = {
			trigger = { has_trait = gregarious }
			text = feast.2501.a.gregarious
		}
		name = {
			trigger = { has_trait = shy }
			text = feast.2501.a.shy
		}
		name = {
			text = feast.2501.a
		}
	}

	option = {
		trigger = {
			opinion = {
				target = scope:activity.activity_owner
				value < 0
			}
		}
		exclusive = yes
		name = feast.2501.b
	}
}

# GUESTS: Host failed to show! -- FALLBACK FOR WEIRDNESS ONLY
# by Petter Vilberg
###
feast.2502 = {
	type = character_event
	desc = feast.2502.desc
	theme = feast_activity
	left_portrait = {
		character = scope:activity.activity_owner
		animation = dismissal
	}

	immediate = {
		add_opinion = {
			modifier = feast_host_failed_to_appear
			target = scope:activity.activity_owner
		}
	}

	option = {
		name = feast.2502.a
	}
}



####################################
# FEAST INTERRUPTION NOTIFICATIONS
# 5000-5999
####################################

#The host has died during the feast - event for guests
# by Linnéa Thimrén
feast.5003 = {
	type = character_event
	title = feast.5003.t
	desc = feast.3601.desc
	theme = feast_activity
	override_icon = {
		reference = "gfx/interface/event_window/type_illness.dds"
	}
	left_portrait = {
		character = scope:host
	}

	immediate = {
		feast_end_guest_effect = yes
	}
	
	option = {
		name = feast.3601.a
		flavor = feast.3601.a.tt
	}
}


#The host has been imprisoned - for host
# by Linnéa Thimrén
feast.5004 = {
	type = character_event
	title = feast.5003.t
	desc = feast.5004.desc
	theme = feast_activity
	override_icon = {
		reference = "gfx/interface/event_window/type_prison.dds"
	}
	left_portrait = {
		character = scope:host
		animation = prison_dungeon
	}

	immediate = {
		hosted_successful_feast_interrupted_effect = yes
	}
	
	option = {
		name = feast.5002.a
	}

	after = {
		if = {
			limit = {
				has_character_flag = murdered_someone_during_feast
			}
			remove_character_flag = murdered_someone_during_feast
		}
	}
}

#The host has been imprisoned - for guests
# by Linnéa Thimrén
feast.5005 = {
	type = character_event
	title = feast.5003.t
	desc = feast.5005.desc
	theme = feast_activity
	override_icon = {
		reference = "gfx/interface/event_window/type_prison.dds"
	}
	left_portrait = {
		character = scope:host
		animation = prison_dungeon
	}

	immediate = {
		feast_end_guest_effect = yes
	}
	
	option = {
		name = feast.5002.a
	}
}