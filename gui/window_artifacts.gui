window = {
	name = "artifacts_view"
	parentanchor = top|right
	layer = windows_layer
	movable = no
	using = Window_Size_MainTab
    visible = "[And(GetVariableSystem.Exists('artifact_window_open'),IsInGame)]"	
	state = {
		name = _hide
		trigger_when = "[Not(GetVariableSystem.Exists('artifact_window_open'))]"
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide
		trigger_on_create = yes
		trigger_when = "[IsRightWindowOpen]"

		on_start = "[GetVariableSystem.Clear('artifact_window_open')]"
	}
	state = {
		name = _show
		trigger_when = "[GetVariableSystem.Exists('artifact_window_open')]"
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab
		on_start = "[ToggleGameView( Select_CString( IsGameViewOpen('my_realm'), 'my_realm', 'else_do_nothing' ) )]"
		on_start = "[ToggleGameView( Select_CString( IsGameViewOpen('military'), 'military', 'else_do_nothing' ) )]"
		on_start = "[ToggleGameView( Select_CString( IsGameViewOpen('council_window'), 'council_window', 'else_do_nothing' ) )]"
		on_start = "[ToggleGameView( Select_CString( IsGameViewOpen('court_window'), 'court_window', 'else_do_nothing' ) )]"
		on_start = "[ToggleGameView( Select_CString( IsGameViewOpen('intrigue_window'), 'intrigue_window', 'else_do_nothing' ) )]"
		on_start = "[ToggleGameView( Select_CString( IsGameViewOpen('factions_window'), 'factions_window', 'else_do_nothing' ) )]"
		on_start = "[ToggleGameView( Select_CString( IsGameViewOpen('decisions'), 'decisions', 'else_do_nothing' ) )]"
	}

	background = {
		texture = "gfx/interface/component_tiles/solid_black_label.dds"
		margin_left = -40
		fittype = centercrop
	}
	
	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_right = 20
		widget = {
			size = { 100% 100% }
			using = Window_Background
			using = Window_Decoration_Thin
			
			vbox = {
				using = Window_Margins
				
				header_pattern = {
					layoutpolicy_horizontal = expanding
					
					blockoverride "header_text"
					{
						text = "ARTIFACTS_VIEW_TITLE"
					}
					
					blockoverride "button_close"
					{
						#onclick = "[ExecuteConsoleCommand('GUI.ClearWidgets artifacts_view')]"
						onclick = "[GetVariableSystem.Clear('artifact_window_open')]"
					}
				}
				artifact_spacer_vertical_large = {}
				text_label_center = {
					text = "ARTIFACTS_VIEW_TITLES"
				}
				artifact_spacer_vertical_large = {}
				artifact_spacer_vertical_large = {}
				vbox = {
					background = {
						margin_left = 40
						margin_right = 40
						margin_top = 20
						margin_bottom = 20

						texture = "gfx/interface/component_tiles/solid_black_label.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }

						modify_texture = {
							name = "mask"
							texture = "gfx/interface/component_masks/mask_rough_edges.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					hbox = {
						parentanchor = left
						vbox = {
							button = {
								datacontext = "[GetScriptedGui('artifacts_destroy_artifact')]"
								visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								name = "artifact_destroy"
								position = { -25 5 }
								texture = "gfx/interface/buttons/artifact_destroy.dds"
								framesize = { 100 100 }
								size = { 50 50 }
								tooltip = destroy_artifact_tt
								enabled = yes
								onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_quit_game"

							}
							button = {
								datacontext = "[GetScriptedGui('artifacts_cant_artifact')]"
								visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								name = "artifact_indestructible"
								position = { -25 5 }
								framesize = { 100 100 }
								size = { 50 50 }
								enabled = yes
								onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
							}
							vbox = {
								text_single = {
									text = selected_artifact_indestructible
									align = right
									fontsize = 16
								}
								text_single = {
									text = selected_artifact_rarity
									align = right
									fontsize = 16
								}
							}
						}
						artifact_spacer_horizontal = {}

						vbox = {

						text_single = {
							text = selected_artifact_title
							align = center
							fontsize = 20
						}
						text_single = {
							text = "[Localize(Concatenate(Concatenate('@icon_',GetPlayer.MakeScope.Var('artifact_selection').GetFlagName), '!'))]"

							#"@icon_artifact_31!#testest"
							#
							size = { 50 50 }
							#parentanchor = center
						}
						}
						artifact_spacer_horizontal = {}
						vbox = {
						button = {
							visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
							name = "artifact_equip"
							position = { 25 5 }
							texture = "gfx/interface/buttons/artifact_equip.dds"
							framesize = { 100 100 }
							size = { 50 50 }
							tooltip = equip_artifact_tt
							
							datacontext = "[GetScriptedGui('artifacts_equip_artifact')]"
							enabled = yes
							onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						}
						button = {
							visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
							name = "artifact_unequip"
							position = { 25 5 }
							texture = "gfx/interface/buttons/artifact_unequip.dds"
							framesize = { 100 100 }
							size = { 50 50 }
							tooltip = unequip_artifact_tt
							
							datacontext = "[GetScriptedGui('artifacts_unequip_artifact')]"
							enabled = yes
							onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
						}
					
							text_single = {
								text = selected_artifact_equipped
								align = center
								fontsize = 16
							}
							text_single = {
								text = selected_artifact_type
								align = right
								fontsize = 16
							}

						
						}
					}
					text_multi = {
						text = selected_artifact_desc
						size = { 450 150 }
						maximumsize = { 450 450 }
						align = center
						fontsize = 16
						autoresize = yes
					}
				}
				artifact_spacer_vertical_large = {}
				artifact_spacer_vertical_large = {}
				scrollbox = {
					name = "artifacts_scrollarea"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					
					background = {
						texture = "gfx/interface/illustrations/event_scenes/armory.dds"
						margin = { -5 0 }
						fittype = end
						alpha = 0.8
						framesize = { 1200 848 }
						
						modify_texture = {
							texture = "gfx/interface/component_masks/mask_fade_vertical_up.dds"
							blend_mode = alphamultiply
						}
					}
					
					blockoverride "scrollbox_content"
					{
						name = "artifacts_main_container"
						spacing = 20
						
						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10
							
							text_single = {
								datacontext = "[GetScriptedGui('artifacts_has_no_artifacts')]"
								visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								text = "ARTIFACTS_VIEW_NONE"
								default_format = "#low;italic"
							}
							#START OF TOBBZN'S EXPERIMENTAL DYNAMIC ARTIFACT MODULE

							vbox = {
								name = "artifact_all"
								datamodel = "[GetPlayer.MakeScope.GetList('artifact_list')]"
								#layoutpolicy_vertical = expanding
								#visible = "[ScriptedGui.IsShown(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
								item = {
									button_standard = {
										#layoutpolicy_horizontal = expanding
										size = { 500 101 }
										maximumsize = { 500 101 }
										datacontext = "[GetScriptedGui( 'artifacts_scripted' )]"
										onclick = "[ExecuteConsoleCommand(Concatenate(Concatenate('effect select_artifact = { ARTIFACT =', Scope.GetFlagName),' }'))]"
										# Fire any extra effects, including conditionals for clicking specific artifacts since artifact_selection has already been set:
										onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
										# To emulate equipment backend system purely in GUI:
										onclick = "[GetVariableSystem.Set( 'artifact_selection',Scope.GetFlagName)]"
										# Tooltip shows modifier description, useful for modifiers that affect a lot of different stats.
										tooltip = artifact_tooltip
										block "artifact_entry"
										{}
										hbox = {
											background = {
												texture = "gfx/artifacts/tile_selected_gold.dds"
												spriteType = Corneredtiled
												spriteborder = { 6 6 }
												shaderfile = "gfx/FX/pdxgui_default.shader"
												block "artifact_entry_border"
												{}
											}
								
											button = {
												size = { 101 101 }
												alwaystransparent = yes
												# Golden border around the icon
												background = {
													texture = "gfx/artifacts/tile_selected_gold.dds"
													spriteType = Corneredtiled
													spriteborder = { 6 6 }
													shaderfile = "gfx/FX/pdxgui_default.shader"
													block "artifact_entry_border"
													{}
												}
												# This is actually the icon for the artifact - it has to be generated as a Texticon in order to set the icon path outside of the gui files.
												text_single = {
													text = "[Localize(Concatenate(Concatenate('@icon_',Scope.GetFlagName), '!'))]" 
													size = { 101 101 }
													parentanchor = center
												}
												text_single = {
													text = "#credits_entries x[GetPlayer.MakeScope.Var(Scope.GetFlagName).GetValue|0]#!  "
													size = { 101 101 }
													parentanchor = top|right
													visible = "[GreaterThanOrEqualTo_CFixedPoint(GetPlayer.MakeScope.Var(Scope.GetFlagName).GetValue,'(CFixedPoint)2')]"
												}
												# Background for each entry
												icon = {
													texture = "gfx/artifacts/artifacts_entry_bg.dds"
													position = { 100 2 }
													alwaystransparent = yes
													layer = bottom
												}
											}
											artifact_spacer_horizontal = {}
										
											vbox = {
												artifact_spacer_vertical = {}
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												hbox = {
													layoutpolicy_horizontal = expanding
													textbox = {
														font = StandardGameFont
														fontcolor = { 1 1 1 1 }
														fontsize = 16
														text = GET_ARTIFACT_NAME_LOC
														autoresize = no
														layoutpolicy_horizontal = expanding
														elide = right
														minimumsize = { -1 16 }
														align = left
														block "artifact_name"
														{}
													}
													textbox = {
														# Shows "Equipped" when an artifact is equipped.
														font = StandardGameFont
														fontcolor = { 1 1 1 1 }
														fontsize = 16
														text = "Equipped"
														visible = "[GetPlayer.MakeScope.Var(Concatenate(Scope.GetFlagName,'_equipped')).IsSet]"
														autoresize = no
														layoutpolicy_horizontal = expanding
														elide = right
														minimumsize = { -1 16 }
														align = right
													}
													artifact_spacer_horizontal = {}
													icon = {
														#Shows a checkmark when an item is equipped.
														texture = "gfx/artifacts/icon_check.dds"
														size = { 22 16 }
														visible = "[GetPlayer.MakeScope.Var(Concatenate(Scope.GetFlagName,'_equipped')).IsSet]"
													}
													artifact_spacer_horizontal = {}
												}
												artifact_spacer_vertical = {}
												textbox = {
													font = StandardGameFont
													fontcolor = { 0.8 0.8 0.8 1 }
													fontsize = 12
													# Shows the modifier on the stat sheet for the artifact button.
													text = "[GetModifier(Concatenate(Scope.GetFlagName,'_modifier')).GetDesc]"
													autoresize = no
													layoutpolicy_horizontal = expanding
													layoutpolicy_vertical = expanding
													elide = right
													multiline = yes
													align = top|left
													block "artifact_description"
													{}
												}
											artifact_spacer_vertical = {}
											}
										}
									}
								}
							}
																				#END OF TOBBZN ARTIFACTS
						}
					}
				}
			}
		}
	}
}

types Artifacts
{
	type artifact_spacer_horizontal = widget {
		size = { 8 0 }
	}
	type artifact_spacer_vertical = widget {
		size = { 0 3 }
	}
	type artifact_spacer_vertical_large = widget {
		size = { 0 15 }
	}
}