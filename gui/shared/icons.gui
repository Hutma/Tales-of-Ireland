types IconTypes
{
    type icon_flat_standard = icon
    {
        modify_texture = {
            texture = "gfx/interface/colors/colors_textured.dds"
            blend_mode = add
            framesize = { 96 96 }

            block "master_color_frame" {
                frame = 7
            }
        }
    }

    type icon_doctrine = icon_flat_standard
    {
        size = { 60 60 }
    }

    type icon_building = icon_flat_standard
    {
        size = { 75 65 }
    }

    type highlight_icon_building = button_icon
    {
        size = { 75 65 }
        alwaystransparent = yes
    }

    type icon_building_tab = button_icon
    {
        size = { 75 65 }
    }

    type highlight_icon_lifestyle_focus = button_icon
    {
        size = { 80 80 }
    }

    #### FRONTEND ICONS ####
    type icon_observer = icon_flat_standard {
        size = { 30 30 }
        texture = "gfx/interface/icons/flat_icons/observer.dds"
    }

    type icon_ring = icon_flat_standard {
        size = { 15 15 }
        texture = "gfx/interface/icons/flat_icons/ring.dds"
    }

    type icon_circle_green = icon {
        size = { 15 15 }
        using = Color_Green
        texture = "gfx/interface/icons/flat_icons/circle.dds"
        
        modify_texture = {
            texture = "gfx/interface/colors/colors_textured.dds"
            blend_mode = add
            framesize = { 96 96 }

            block "master_color_frame" {
                frame = 5
            }
        }
    }

    type icon_multiplayer = icon_flat_standard {
        size = { 30 30 }
        texture = "gfx/interface/icons/flat_icons/multiplayer.dds"
    }

    type icon_cloud_save = icon_flat_standard {
        size = { 30 30 }
        texture = "gfx/interface/icons/flat_icons/cloud_save.dds"
    }

    type icon_has_password = icon_flat_standard {
        size = { 30 30 }
        texture = "gfx/interface/icons/flat_icons/has_password.dds"
    }

    type icon_online_offline = icon_flat_standard {
        framesize = { 60 60 }
        size = { 30 30 }
        texture = "gfx/interface/icons/flat_icons/online_offline.dds"
    }

    type cloud_save_icon = icon_flat_standard {
        name = "cloud_save_icon"
        size = { 40 40 }
        texture = "gfx/interface/icons/flat_icons/cloud_save.dds"
        tooltip = "LOAD_CLOUDSAVE_TOOLTIP"
    }

    type ironman_save_icon = icon {
        name = "ironman_icon"
        size = { 40 40 }
        texture = "gfx/interface/icons/meta/icon_ironman.dds"
    }

    type ironman_disabled_icon = icon {
        name = "ironman_icon"
        size = { 40 40 }
        alpha = 0.8
        texture = "gfx/interface/icons/meta/icon_ironman_disabled.dds"
    }

    type invalid_save_icon = icon {
        name = "invalid_icon"
        size = { 40 40 }
        texture = "gfx/interface/icons/symbols/icon_warning.dds"
    }

    type missing_dlcs_icon = icon {
        name = "missing_dlcs_icon"
        size = { 40 40 }
        texture = "gfx/interface/icons/icon_dread.dds"
    }

    type achievements_enabled_icon = icon
	{
		size = { 40 40 }
		texture = "gfx/interface/icons/meta/icon_achievements_enabled.dds"
	}
	type achievements_disabled_icon = icon
	{
		size = { 40 40 }
		texture = "gfx/interface/icons/meta/icon_achievements_disabled.dds"
	}

    type trait_icon_base = icon
    {
        alwaystransparent = yes

        using = Animation_Glow_Pulse

        tooltipwidget = {
            using = character_trait_tooltip
        }

        block "icon_size"
        {
            size = { 50 50 }
        }

        block "texture"
        {
            texture = "[Trait.GetIcon(Character.Self)]"
        }

        block "tooltip_placement"
        {
            using = tooltip_se
        }
    }

    type icon_trait = container 
    {
        block "faith_context"
        {
            datacontext = "[Character.GetFaith]"
        }

        trait_icon_base = {
            name = "normal_trait"
            visible = "[Not( Or( Or( Or( Trait.IsGenetic, Trait.IsInheritable ), Faith.IsTraitVirtue( Trait.Self ) ), Faith.IsTraitSin( Trait.Self ) ) )]"
        }
        trait_icon_base = {
            name = "inheritable_trait"
            visible = "[Or( Trait.IsGenetic, Trait.IsInheritable )]"

            block "glow"
            {
            glow = {
                using = Color_Blue
                using = Glow_Standard
                block "glow_radius"
                {
                    glow_radius = 5
                }
            }
            }
        }
        trait_icon_base = {
            name = "virtue_trait"
            visible = "[Faith.IsTraitVirtue( Trait.Self )]"

            block "glow"
            {
            glow = {
                using = Color_Green
                using = Glow_Standard
                block "glow_radius"
                {
                    glow_radius = 5
                }
            }
            }
        }
        trait_icon_base = {
            name = "sin_trait"
            visible = "[Faith.IsTraitSin( Trait.Self )]"

            block "glow"
            {
            glow = {
                using = Color_Red
                using = Glow_Standard
                block "glow_radius"
                {
                    glow_radius = 5
                }
            }
            }
        }

        #icon = {
        #	visible = "[Or(Trait.IsGenetic, Trait.IsInheritable)]"
        #	parentanchor = right
        #	position = { 2 0 }
        #	texture = "gfx/interface/icons/traits/congenital.dds"
        #}

        # icon = {
        # 	name = "overlay"
        # 	alwaystransparent = yes
        # 	texture = "[Trait.GetIconOverlayForLocalPlayer]"

        # 	block "overlay_position"
        # 	{
        # 		position = { -10 -10 }
        # 	}

        # 	block "overlay_anchor"
        # 	{
        # 		parentanchor = "bottom|right"
        # 		widgetanchor = "vcenter|hcenter"
        # 	}

        # 	block "overlay_size"
        # 	{
        # 		size = { 24 24 }
        # 	}
        # }
    }
}